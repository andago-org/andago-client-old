(()=>{var e={1993:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=1993,e.exports=t},8374:(e,t,r)=>{"use strict";var a;r.d(t,{_:()=>a}),function(e){e["View"]="view",e["Create"]="create",e["Edit"]="edit"}(a||(a={}))},3096:(e,t,r)=>{"use strict";r(7726),r(3473),r(1286);var a=r(9963),o=r(6252),n=r(2262),s=r(9261),i=r(7627);const c=(0,o.aZ)({__name:"App",setup(e){const t=(0,i.h)();return t.loadFromStorage(),(e,t)=>((0,o.wg)(),(0,o.j4)((0,n.SU)(s.dr),null,{default:(0,o.w5)((()=>[(0,o.Wm)((0,n.SU)(s.jP))])),_:1}))}}),l=c,d=l;var u=r(3476),h=(r(8851),r(1292),r(1633),r(1045),r(4775),r(2299),r(3423),r(4687),r(9147),r(6250),r(6086)),p=r(5929);const f=(0,h.WB)();f.use(p.Z);const m=(0,a.ri)(d).use(s.oX).use(u.Z).use(f);m.provide("mainStore",(0,i.h)()),u.Z.isReady().then((()=>{m.mount("#app")}))},3476:(e,t,r)=>{"use strict";r.d(t,{Z:()=>f});r(3948);var a=r(1089),o=r(7627),n=r(6252),s=r(2262),i=r(9261),c=r(8903);const l=(0,n.aZ)({__name:"MainPage",setup(e){return(e,t)=>((0,n.wg)(),(0,n.j4)((0,s.SU)(i._i),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,s.SU)(i.UN),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,s.SU)(i.jP)),(0,n.Wm)((0,s.SU)(i.yq),{color:"primary",slot:"bottom"},{default:(0,n.w5)((()=>[(0,n.Wm)((0,s.SU)(i.ZU),{tab:"tab1",href:"/tabs/profile"},{default:(0,n.w5)((()=>[(0,n.Wm)((0,s.SU)(i.gu),{"aria-hidden":"true",icon:(0,s.SU)(c.lBs)},null,8,["icon"]),(0,n.Wm)((0,s.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Profile")])),_:1})])),_:1}),(0,n.Wm)((0,s.SU)(i.ZU),{tab:"tab2",href:"/tabs/trip"},{default:(0,n.w5)((()=>[(0,n.Wm)((0,s.SU)(i.gu),{"aria-hidden":"true",icon:(0,s.SU)(c.ZBl)},null,8,["icon"]),(0,n.Wm)((0,s.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Trip")])),_:1})])),_:1}),(0,n.Wm)((0,s.SU)(i.ZU),{tab:"tab3",href:"/tabs/chat"},{default:(0,n.w5)((()=>[(0,n.Wm)((0,s.SU)(i.gu),{"aria-hidden":"true",icon:(0,s.SU)(c.WiS)},null,8,["icon"]),(0,n.Wm)((0,s.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Chat")])),_:1})])),_:1}),(0,n.Wm)((0,s.SU)(i.ZU),{tab:"tab4",href:"/tabs/settings"},{default:(0,n.w5)((()=>[(0,n.Wm)((0,s.SU)(i.gu),{"aria-hidden":"true",icon:(0,s.SU)(c.Xdb)},null,8,["icon"]),(0,n.Wm)((0,s.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Settings")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1}))}}),d=l,u=d,h=[{path:"/sign-in",component:()=>r.e(636).then(r.bind(r,7636))},{path:"/code-verify",component:()=>r.e(176).then(r.bind(r,4176))},{path:"/driver/",component:()=>r.e(880).then(r.bind(r,9880)),children:[{path:"",redirect:"/driver/trip"},{path:"trip",component:()=>Promise.all([r.e(592),r.e(695)]).then(r.bind(r,7695))}]},{path:"/tabs/",component:u,children:[{path:"",redirect:"/tabs/trip"},{path:"profile",component:()=>r.e(566).then(r.bind(r,5566))},{path:"trip",component:()=>Promise.all([r.e(592),r.e(47)]).then(r.bind(r,9362))},{path:"chat",component:()=>r.e(208).then(r.bind(r,1208))},{path:"settings",component:()=>r.e(564).then(r.bind(r,4564))}]}],p=(0,a.p7)({history:(0,a.PO)("/"),routes:h});p.beforeEach(((e,t,r)=>{const a=(0,o.h)(),n=a.token,s=a.driverMode;"/sign-in"===e.path||"/code-verify"===e.path||"/"===e.path?n?r(s?"/driver/":"/tabs/"):r():n?r():r("/sign-in")}));const f=p},7627:(e,t,r)=>{"use strict";r.d(t,{h:()=>p});r(7658),r(8862);var a=r(6086),o=r(6154),n=r(3476),s=r(5332),i=r(411),c=r(8374),l=r(4571),d=r(6606),u=r.n(d);const h=o.Z.create({baseURL:"http://localhost/api",headers:{Accept:"application/json","Content-Type":"application/json"}}),p=(0,a.Q_)({id:"mainStore",state:()=>({phoneNumber:"",token:"",user:null,selectedVehicle:null,vehicles:[],creditWallet:0,driverMode:!1,coordinate:{lat:0,lng:0},fakeGeolocation:!1,pickUpPlace:{place_id:"",name:"",address:"",coordinate:{lat:0,lng:0}},dropOffPlace:{place_id:"",name:"",address:"",coordinate:{lat:0,lng:0}},distance:0,duration:"0 min",fare:0,myTrip:{},paymentDetails:{min_fare:{text:"",value:0},distance_addon:{text:"",value:0},duration_addon:{text:"",value:0},total_fare:{text:"",value:0}},receivedTripJob:{},jobDetails:{distanceToPickUp:"",durationToPickUp:""},acceptedDriver:{},acceptedTrip:{},channel:null}),getters:{getPhoneNumber(){return this.phoneNumber},async currentPosition(){const e=await i.b.getCurrentPosition(),t={lat:e.coords.latitude,lng:e.coords.longitude};return t}},actions:{async openMap(){const{latitude:e,longitude:t}=(await i.b.getCurrentPosition()).coords;try{await s.h.canOpenUrl({url:"maps://"}),await s.h.openUrl({url:`maps://?q=${e},${t}`})}catch(r){console.error("Error launching map application",r)}},async getGeolocation(){const e=await i.b.getCurrentPosition(),t={lat:e.coords.latitude,lng:e.coords.longitude};return t},async getPickUpPosition(){const e={lat:this.receivedTripJob.pickup_place.latitude,lng:this.receivedTripJob.pickup_place.longitude};return e},async tryLogin(e){try{const t="+6"+e;this.setHeaders();const r={phoneNumber:t,driverMode:this.driverMode},a=await h.post("/auth/tryLogin",r);return 200===a.status&&(this.phoneNumber=t,n.Z.push({path:"/code-verify"})),a.data}catch(t){console.error("Error performing the request:",t)}},async login(e){try{this.setHeaders();const t=await h.post("/auth/login",{phoneNumber:this.phoneNumber,code:e});return 200===t.status&&(console.log(t.data),this.token=t.data.token,this.user=t.data.user,this.setUserToken(this.token),this.setHeaders(),this.driverMode?n.Z.push({path:"/driver"}):n.Z.push({path:"/"})),t.data}catch(t){console.error("Error performing the request:",t)}},async logout(){try{this.removeUser(),l.u.remove({key:"data"}),this.driverMode=!1,this.setHeaders();const e=await h.post("/auth/logout");return n.Z.push({path:"/sign-in"}),e.data}catch(e){console.error("Error performing the request:",e)}},async getDistanceMatrix(e,t){try{this.setHeaders();const r={start:e,end:t},a=await h.post("/maps/getDistanceMatrix",r);if(200===a.status)return a.data}catch(r){console.error("Error performing the request:",r)}},async getPlaces(e){try{var t,r;this.setHeaders();let a={lat:null===(t=this.coordinate)||void 0===t?void 0:t.lat,lng:null===(r=this.coordinate)||void 0===r?void 0:r.lng};if(!this.fakeGeolocation){const e=await i.b.getCurrentPosition();a={lat:e.coords.latitude,lng:e.coords.longitude}}const o={query:e,lat:a.lat,lng:a.lng},n=await h.post("/maps/getPlaces",o);if(200===n.status)return n.data.results}catch(a){console.error("Error performing the request:",a)}},setHeaders(){h.defaults.headers.common["Authorization"]=`Bearer ${this.token}`,h.defaults.headers.post["Content-Type"]="application/json"},async getUser(){try{this.setHeaders(),h.post("/auth/getUser").then((e=>(200===e.status&&(this.user=e.data,n.Z.push({path:"/"})),e.data)))}catch(e){console.error("Error performing the request:",e)}},removeUser(){this.user=null,this.clearUserToken()},async loadFromStorage(){const{value:e}=await l.u.get({key:"data"}),{value:t}=await l.u.get({key:"driverMode"}),r=JSON.parse(e||"{}");this.driverMode="true"===t||!1,r&&(this.token=r.token,""!=this.token&&(this.user=await this.getUser()))},async saveToStorage(){const e={token:this.token};await l.u.set({key:"driverMode",value:this.driverMode.toString()}),await l.u.set({key:"data",value:JSON.stringify(e)})},setUserToken(e){this.token=e,this.saveToStorage()},clearUserToken(){this.token="",this.saveToStorage()},async createTripPayment(){try{this.setHeaders(),console.log(this.pickUpPlace);const e={pickUp:this.pickUpPlace,dropOff:this.dropOffPlace},t=await h.post("/trips/createTripPayment",e);console.log(t.data),200===t.status&&(this.paymentDetails=t.data.paymentDetails)}catch(e){console.error("Error performing the request:",e)}},async confirmTrip(){try{this.setHeaders(),this.acceptedDriver=null;const e=await h.post("/trips/confirmTrip");if(200===e.status)return console.log("Trip confirm",e.data),e.data}catch(e){console.error("Error performing the request:",e)}},async acceptTrip(e){try{this.setHeaders();const t={trip_id:e},r=await h.post("/trips/acceptTrip",t);if(200===r.status)return console.log(r.data),r.data}catch(t){console.error("Error performing the request:",t)}},async getVehicles(){try{this.setHeaders();const e=await h.get("/vehicles");200===e.status&&(console.log(e.data),this.vehicles=[],e.data.forEach((e=>{this.vehicles.push({...e,controlMode:c._.View})})))}catch(e){console.error("Error performing the request:",e)}},async createVehicle(e){try{this.setHeaders();const t={name:e.name},r=await h.post("/vehicles",t);if(200===r.status)return this.vehicles=r.data,r.data}catch(t){console.error("Error performing the request:",t)}},async updateVehicle(e){try{this.setHeaders();const t={id:e.id,name:e.name},r=await h.post("/vehicles/updateVehicle",t);if(200===r.status)return this.vehicles=r.data,r.data}catch(t){console.error("Error performing the request:",t)}},async selectVehicle(e){try{this.setHeaders(),this.selectedVehicle=e;const t={id:e.id},r=await h.post("/vehicles/selectVehicle",t);return this.vehicles=[],this.vehicles=r.data,r.data}catch(t){console.error("Error performing the request:",t)}},async deleteVehicle(e){try{this.setHeaders();const t={id:e.id},r=await h.post("/vehicles/deleteVehicle",t);if(200===r.status)return this.vehicles=r.data,r.data}catch(t){console.error("Error performing the request:",t)}},connectChannel(e){const t=new(u())("a294542618ad0c79d7b7",{cluster:"ap1"});this.channel=t.subscribe(e)}},persist:{enabled:!0}})}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}r.m=e,(()=>{var e=[];r.O=(t,a,o,n)=>{if(!a){var s=1/0;for(d=0;d<e.length;d++){for(var[a,o,n]=e[d],i=!0,c=0;c<a.length;c++)(!1&n||s>=n)&&Object.keys(r.O).every((e=>r.O[e](a[c])))?a.splice(c--,1):(i=!1,n<s&&(s=n));if(i){e.splice(d--,1);var l=o();void 0!==l&&(t=l)}}return t}n=n||0;for(var d=e.length;d>0&&e[d-1][2]>n;d--)e[d]=e[d-1];e[d]=[a,o,n]}})(),(()=>{r.n=e=>{var t=e&&e.__esModule?()=>e["default"]:()=>e;return r.d(t,{a:t}),t}})(),(()=>{r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}})(),(()=>{r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,a)=>(r.f[a](e,t),t)),[]))})(),(()=>{r.u=e=>"js/"+e+"-legacy."+{47:"77de805a",74:"e03a3084",78:"292bad96",176:"c96b5af1",208:"7ae53ed0",338:"28a2970f",539:"e086d757",541:"ac2f8eef",564:"a2cda2b6",566:"c6ef314b",576:"cfe56f43",592:"f451372d",636:"b7a00317",642:"6f0e8fd2",695:"079fde31",753:"833a0f79",775:"f5c7652e",805:"fc3e34ff",880:"9e12e508",990:"c455c5db"}[e]+".js"})(),(()=>{r.miniCssF=e=>"css/"+e+"."+{47:"e34297c7",176:"7274ec62",566:"21fcdbc0",636:"62a727e8",695:"40e62a3d"}[e]+".css"})(),(()=>{r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()})(),(()=>{r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)})(),(()=>{var e={},t="andago-client:";r.l=(a,o,n,s)=>{if(e[a])e[a].push(o);else{var i,c;if(void 0!==n)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==a||u.getAttribute("data-webpack")==t+n){i=u;break}}i||(c=!0,i=document.createElement("script"),i.charset="utf-8",i.timeout=120,r.nc&&i.setAttribute("nonce",r.nc),i.setAttribute("data-webpack",t+n),i.src=a),e[a]=[o];var h=(t,r)=>{i.onerror=i.onload=null,clearTimeout(p);var o=e[a];if(delete e[a],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=h.bind(null,i.onerror),i.onload=h.bind(null,i.onload),c&&document.head.appendChild(i)}}})(),(()=>{r.r=e=>{"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}})(),(()=>{r.p="/"})(),(()=>{if("undefined"!==typeof document){var e=(e,t,r,a,o)=>{var n=document.createElement("link");n.rel="stylesheet",n.type="text/css";var s=r=>{if(n.onerror=n.onload=null,"load"===r.type)a();else{var s=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.href||t,c=new Error("Loading CSS chunk "+e+" failed.\n("+i+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=s,c.request=i,n.parentNode&&n.parentNode.removeChild(n),o(c)}};return n.onerror=n.onload=s,n.href=t,r?r.parentNode.insertBefore(n,r.nextSibling):document.head.appendChild(n),n},t=(e,t)=>{for(var r=document.getElementsByTagName("link"),a=0;a<r.length;a++){var o=r[a],n=o.getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(n===e||n===t))return o}var s=document.getElementsByTagName("style");for(a=0;a<s.length;a++){o=s[a],n=o.getAttribute("data-href");if(n===e||n===t)return o}},a=a=>new Promise(((o,n)=>{var s=r.miniCssF(a),i=r.p+s;if(t(s,i))return o();e(a,i,null,o,n)})),o={143:0};r.f.miniCss=(e,t)=>{var r={47:1,176:1,566:1,636:1,695:1};o[e]?t.push(o[e]):0!==o[e]&&r[e]&&t.push(o[e]=a(e).then((()=>{o[e]=0}),(t=>{throw delete o[e],t})))}}})(),(()=>{var e={143:0};r.f.j=(t,a)=>{var o=r.o(e,t)?e[t]:void 0;if(0!==o)if(o)a.push(o[2]);else{var n=new Promise(((r,a)=>o=e[t]=[r,a]));a.push(o[2]=n);var s=r.p+r.u(t),i=new Error,c=a=>{if(r.o(e,t)&&(o=e[t],0!==o&&(e[t]=void 0),o)){var n=a&&("load"===a.type?"missing":a.type),s=a&&a.target&&a.target.src;i.message="Loading chunk "+t+" failed.\n("+n+": "+s+")",i.name="ChunkLoadError",i.type=n,i.request=s,o[1](i)}};r.l(s,c,"chunk-"+t,t)}},r.O.j=t=>0===e[t];var t=(t,a)=>{var o,n,[s,i,c]=a,l=0;if(s.some((t=>0!==e[t]))){for(o in i)r.o(i,o)&&(r.m[o]=i[o]);if(c)var d=c(r)}for(t&&t(a);l<s.length;l++)n=s[l],r.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return r.O(d)},a=self["webpackChunkandago_client"]=self["webpackChunkandago_client"]||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var a=r.O(void 0,[998],(()=>r(3096)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
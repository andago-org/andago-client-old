"use strict";(self["webpackChunkandago_client"]=self["webpackChunkandago_client"]||[]).push([[541],{9541:(e,t,s)=>{s.r(t),s.d(t,{PreferencesWeb:()=>r});var i=s(9895);class r extends i.Uw{constructor(){super(...arguments),this.group="CapacitorStorage"}async configure({group:e}){"string"===typeof e&&(this.group=e)}async get(e){const t=this.impl.getItem(this.applyPrefix(e.key));return{value:t}}async set(e){this.impl.setItem(this.applyPrefix(e.key),e.value)}async remove(e){this.impl.removeItem(this.applyPrefix(e.key))}async keys(){const e=this.rawKeys().map((e=>e.substring(this.prefix.length)));return{keys:e}}async clear(){for(const e of this.rawKeys())this.impl.removeItem(e)}async migrate(){var e;const t=[],s=[],i="_cap_",r=Object.keys(this.impl).filter((e=>0===e.indexOf(i)));for(const a of r){const r=a.substring(i.length),n=null!==(e=this.impl.getItem(a))&&void 0!==e?e:"",{value:p}=await this.get({key:r});"string"===typeof p?s.push(r):(await this.set({key:r,value:n}),t.push(r))}return{migrated:t,existing:s}}async removeOld(){const e="_cap_",t=Object.keys(this.impl).filter((t=>0===t.indexOf(e)));for(const s of t)this.impl.removeItem(s)}get impl(){return window.localStorage}get prefix(){return"NativeStorage"===this.group?"":`${this.group}.`}rawKeys(){return Object.keys(this.impl).filter((e=>0===e.indexOf(this.prefix)))}applyPrefix(e){return this.prefix+e}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvNTQxLmFjMmY4ZWVmLmpzIiwibWFwcGluZ3MiOiJzS0FDTyxNQUFNQSxVQUF1QixLQUNoQ0MsY0FDSUMsU0FBU0MsV0FDVEMsS0FBS0MsTUFBUSxrQkFDakIsQ0FDQUMsaUJBQWdCLE1BQUVELElBQ08sa0JBQVZBLElBQ1BELEtBQUtDLE1BQVFBLEVBRXJCLENBQ0FDLFVBQVVDLEdBQ04sTUFBTUMsRUFBUUosS0FBS0ssS0FBS0MsUUFBUU4sS0FBS08sWUFBWUosRUFBUUssTUFDekQsTUFBTyxDQUFFSixRQUNiLENBQ0FGLFVBQVVDLEdBQ05ILEtBQUtLLEtBQUtJLFFBQVFULEtBQUtPLFlBQVlKLEVBQVFLLEtBQU1MLEVBQVFDLE1BQzdELENBQ0FGLGFBQWFDLEdBQ1RILEtBQUtLLEtBQUtLLFdBQVdWLEtBQUtPLFlBQVlKLEVBQVFLLEtBQ2xELENBQ0FOLGFBQ0ksTUFBTVMsRUFBT1gsS0FBS1ksVUFBVUMsS0FBSUMsR0FBS0EsRUFBRUMsVUFBVWYsS0FBS2dCLE9BQU9DLFVBQzdELE1BQU8sQ0FBRU4sT0FDYixDQUNBVCxjQUNJLElBQUssTUFBTU0sS0FBT1IsS0FBS1ksVUFDbkJaLEtBQUtLLEtBQUtLLFdBQVdGLEVBRTdCLENBQ0FOLGdCQUNJLElBQUlnQixFQUNKLE1BQU1DLEVBQVcsR0FDWEMsRUFBVyxHQUNYQyxFQUFZLFFBQ1pWLEVBQU9XLE9BQU9YLEtBQUtYLEtBQUtLLE1BQU1rQixRQUFPVCxHQUE4QixJQUF6QkEsRUFBRVUsUUFBUUgsS0FDMUQsSUFBSyxNQUFNSSxLQUFVZCxFQUFNLENBQ3ZCLE1BQU1ILEVBQU1pQixFQUFPVixVQUFVTSxFQUFVSixRQUNqQ2IsRUFBNkMsUUFBcENjLEVBQUtsQixLQUFLSyxLQUFLQyxRQUFRbUIsVUFBNEIsSUFBUFAsRUFBZ0JBLEVBQUssSUFDeEVkLE1BQU9zQixTQUF1QjFCLEtBQUsyQixJQUFJLENBQUVuQixRQUNyQixrQkFBakJrQixFQUNQTixFQUFTUSxLQUFLcEIsVUFHUlIsS0FBSzZCLElBQUksQ0FBRXJCLE1BQUtKLFVBQ3RCZSxFQUFTUyxLQUFLcEIsR0FFdEIsQ0FDQSxNQUFPLENBQUVXLFdBQVVDLFdBQ3ZCLENBQ0FsQixrQkFDSSxNQUFNbUIsRUFBWSxRQUNaVixFQUFPVyxPQUFPWCxLQUFLWCxLQUFLSyxNQUFNa0IsUUFBT1QsR0FBOEIsSUFBekJBLEVBQUVVLFFBQVFILEtBQzFELElBQUssTUFBTUksS0FBVWQsRUFDakJYLEtBQUtLLEtBQUtLLFdBQVdlLEVBRTdCLENBQ0lwQixXQUNBLE9BQU95QixPQUFPQyxZQUNsQixDQUNJZixhQUNBLE1BQXNCLGtCQUFmaEIsS0FBS0MsTUFBNEIsR0FBSyxHQUFHRCxLQUFLQyxRQUN6RCxDQUNBVyxVQUNJLE9BQU9VLE9BQU9YLEtBQUtYLEtBQUtLLE1BQU1rQixRQUFPVCxHQUFnQyxJQUEzQkEsRUFBRVUsUUFBUXhCLEtBQUtnQixTQUM3RCxDQUNBVCxZQUFZQyxHQUNSLE9BQU9SLEtBQUtnQixPQUFTUixDQUN6QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5kYWdvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AY2FwYWNpdG9yL3ByZWZlcmVuY2VzL2Rpc3QvZXNtL3dlYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXZWJQbHVnaW4gfSBmcm9tICdAY2FwYWNpdG9yL2NvcmUnO1xuZXhwb3J0IGNsYXNzIFByZWZlcmVuY2VzV2ViIGV4dGVuZHMgV2ViUGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ncm91cCA9ICdDYXBhY2l0b3JTdG9yYWdlJztcbiAgICB9XG4gICAgYXN5bmMgY29uZmlndXJlKHsgZ3JvdXAgfSkge1xuICAgICAgICBpZiAodHlwZW9mIGdyb3VwID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbXBsLmdldEl0ZW0odGhpcy5hcHBseVByZWZpeChvcHRpb25zLmtleSkpO1xuICAgICAgICByZXR1cm4geyB2YWx1ZSB9O1xuICAgIH1cbiAgICBhc3luYyBzZXQob3B0aW9ucykge1xuICAgICAgICB0aGlzLmltcGwuc2V0SXRlbSh0aGlzLmFwcGx5UHJlZml4KG9wdGlvbnMua2V5KSwgb3B0aW9ucy52YWx1ZSk7XG4gICAgfVxuICAgIGFzeW5jIHJlbW92ZShvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW1wbC5yZW1vdmVJdGVtKHRoaXMuYXBwbHlQcmVmaXgob3B0aW9ucy5rZXkpKTtcbiAgICB9XG4gICAgYXN5bmMga2V5cygpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IHRoaXMucmF3S2V5cygpLm1hcChrID0+IGsuc3Vic3RyaW5nKHRoaXMucHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4geyBrZXlzIH07XG4gICAgfVxuICAgIGFzeW5jIGNsZWFyKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLnJhd0tleXMoKSkge1xuICAgICAgICAgICAgdGhpcy5pbXBsLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBtaWdyYXRlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1pZ3JhdGVkID0gW107XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gW107XG4gICAgICAgIGNvbnN0IG9sZHByZWZpeCA9ICdfY2FwXyc7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmltcGwpLmZpbHRlcihrID0+IGsuaW5kZXhPZihvbGRwcmVmaXgpID09PSAwKTtcbiAgICAgICAgZm9yIChjb25zdCBvbGRrZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gb2xka2V5LnN1YnN0cmluZyhvbGRwcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKF9hID0gdGhpcy5pbXBsLmdldEl0ZW0ob2xka2V5KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgICAgICBjb25zdCB7IHZhbHVlOiBjdXJyZW50VmFsdWUgfSA9IGF3YWl0IHRoaXMuZ2V0KHsga2V5IH0pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50VmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmcucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXQoeyBrZXksIHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIG1pZ3JhdGVkLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBtaWdyYXRlZCwgZXhpc3RpbmcgfTtcbiAgICB9XG4gICAgYXN5bmMgcmVtb3ZlT2xkKCkge1xuICAgICAgICBjb25zdCBvbGRwcmVmaXggPSAnX2NhcF8nO1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5pbXBsKS5maWx0ZXIoayA9PiBrLmluZGV4T2Yob2xkcHJlZml4KSA9PT0gMCk7XG4gICAgICAgIGZvciAoY29uc3Qgb2xka2V5IG9mIGtleXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW1wbC5yZW1vdmVJdGVtKG9sZGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGltcGwoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgIH1cbiAgICBnZXQgcHJlZml4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncm91cCA9PT0gJ05hdGl2ZVN0b3JhZ2UnID8gJycgOiBgJHt0aGlzLmdyb3VwfS5gO1xuICAgIH1cbiAgICByYXdLZXlzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5pbXBsKS5maWx0ZXIoayA9PiBrLmluZGV4T2YodGhpcy5wcmVmaXgpID09PSAwKTtcbiAgICB9XG4gICAgYXBwbHlQcmVmaXgoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeCArIGtleTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWIuanMubWFwIl0sIm5hbWVzIjpbIlByZWZlcmVuY2VzV2ViIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImFyZ3VtZW50cyIsInRoaXMiLCJncm91cCIsImFzeW5jIiwib3B0aW9ucyIsInZhbHVlIiwiaW1wbCIsImdldEl0ZW0iLCJhcHBseVByZWZpeCIsImtleSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwia2V5cyIsInJhd0tleXMiLCJtYXAiLCJrIiwic3Vic3RyaW5nIiwicHJlZml4IiwibGVuZ3RoIiwiX2EiLCJtaWdyYXRlZCIsImV4aXN0aW5nIiwib2xkcHJlZml4IiwiT2JqZWN0IiwiZmlsdGVyIiwiaW5kZXhPZiIsIm9sZGtleSIsImN1cnJlbnRWYWx1ZSIsImdldCIsInB1c2giLCJzZXQiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9
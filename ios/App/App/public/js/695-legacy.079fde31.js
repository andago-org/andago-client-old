"use strict";(self["webpackChunkandago_client"]=self["webpackChunkandago_client"]||[]).push([[695],{3744:(e,l)=>{l.Z=(e,l)=>{const t=e.__vccOpts||e;for(const[n,a]of l)t[n]=a;return t}},7695:(e,l,t)=>{t.r(l),t.d(l,{default:()=>b});var n=t(6252),a=t(2262),i=t(9261),u=t(3577),o=t(7627),c=t(8903),d=t(6592);const r=(0,n._)("div",{id:"map2"},null,-1),s=(0,n.aZ)({__name:"DriverJobModal",props:{isOpen:Boolean,tripDetails:{type:Object,required:!0}},emits:["update:isOpen","accept","decline","update:tripDetails"],setup(e,{emit:l}){const t=e,s=(0,o.h)(),p=(0,a.iH)(null);function U(){l("update:isOpen",!1)}function w(){l("accept")}function f(){l("decline")}return(0,n.YP)((()=>t.isOpen),(async e=>{if(e){const e=await s.getGeolocation(),l=await s.getPickUpPosition();d.Z.load().then((t=>{p.value=new t.Map(document.getElementById("map2"),{center:e,zoom:5,disableDefaultUI:!0}),d.Z.calculateRoute(e,l,p.value)}))}})),(l,t)=>((0,n.wg)(),(0,n.j4)((0,a.SU)(i.ki),{"is-open":e.isOpen,onDismiss:U},{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Gu),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.sr),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.wd),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Job Found")])),_:1})])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.W2),null,{default:(0,n.w5)((()=>[r,(0,n.Wm)((0,a.SU)(i.q_),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Ie),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Pick-Up")])),_:1}),(0,n.Wm)((0,a.SU)(i.yW),null,{default:(0,n.w5)((()=>[(0,n._)("h3",null,[(0,n.Wm)((0,a.SU)(i.gu),{icon:(0,a.SU)(c.xhW),color:"primary"},null,8,["icon"]),(0,n.Uk)((0,u.zw)((0,a.SU)(s).receivedTripJob.pickup_place.name),1)]),(0,n._)("p",null,(0,u.zw)((0,a.SU)(s).receivedTripJob.pickup_place.address),1)])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.Ie),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Drop-Off")])),_:1}),(0,n.Wm)((0,a.SU)(i.yW),null,{default:(0,n.w5)((()=>[(0,n._)("h3",null,[(0,n.Wm)((0,a.SU)(i.gu),{icon:(0,a.SU)(c.c4g),color:"tertiary"},null,8,["icon"]),(0,n.Uk)((0,u.zw)((0,a.SU)(s).receivedTripJob.dropoff_place.name),1)]),(0,n._)("p",null,(0,u.zw)((0,a.SU)(s).receivedTripJob.dropoff_place.address),1)])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.Ie),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Distance to Pick-Up Point:")])),_:1}),(0,n.Wm)((0,a.SU)(i.uN),{slot:"end"},{default:(0,n.w5)((()=>[(0,n.Uk)((0,u.zw)((0,a.SU)(s).jobDetails.distanceToPickUp),1)])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.Ie),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Duration to Pick-Up Point:")])),_:1}),(0,n.Wm)((0,a.SU)(i.uN),{slot:"end"},{default:(0,n.w5)((()=>[(0,n.Uk)((0,u.zw)((0,a.SU)(s).jobDetails.durationToPickUp),1)])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.Ie),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Trip Distance:")])),_:1}),(0,n.Wm)((0,a.SU)(i.uN),{slot:"end"},{default:(0,n.w5)((()=>[(0,n.Uk)((0,u.zw)((0,a.SU)(s).receivedTripJob.distance)+" km",1)])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.Ie),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Trip Duration:")])),_:1}),(0,n.Wm)((0,a.SU)(i.uN),{slot:"end"},{default:(0,n.w5)((()=>[(0,n.Uk)((0,u.zw)((0,a.SU)(s).receivedTripJob.duration)+" mins",1)])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.Ie),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Q$),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Fare:")])),_:1}),(0,n.Wm)((0,a.SU)(i.uN),{slot:"end"},{default:(0,n.w5)((()=>[(0,n.Uk)("RM "+(0,u.zw)((0,a.SU)(s).receivedTripJob.fare),1)])),_:1})])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.jY),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Nd),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.wI),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.YG),{color:"primary",expand:"block",onClick:t[0]||(t[0]=e=>w())},{default:(0,n.w5)((()=>[(0,n.Uk)("Accept")])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.wI),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.YG),{color:"secondary",expand:"block",onClick:t[1]||(t[1]=e=>f())},{default:(0,n.w5)((()=>[(0,n.Uk)("Decline")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1})])),_:1},8,["is-open"]))}}),p=s,U=p;var w=t(6606),f=t.n(w);const m=e=>((0,n.dD)("data-v-3ff606f6"),e=e(),(0,n.Cn)(),e),_=m((()=>(0,n._)("h1",null,"Status",-1))),S=m((()=>(0,n._)("div",{id:"navigationMap",style:{height:"400px"}},null,-1))),W=(0,n.aZ)({__name:"DriverTripPage",setup(e){const l=(0,o.h)(),t=(0,a.iH)({}),u=((0,a.iH)(!1),(0,a.iH)(!1));(0,a.iH)(null);function c(){l.logout()}function r(){u.value=!1,l.acceptTrip(l.receivedTripJob.id),l.connectChannel("user-channel-"+l.acceptedTrip.user.id)}function s(){u.value=!1}(0,n.bv)((()=>{d.Z.load().then((async e=>{const t=new e.Map(document.getElementById("navigationMap"),{center:await l.currentPosition,zoom:18}),n=await l.currentPosition,a={lat:3.0830124,lng:101.662267};await d.Z.startNavigator(n,a,t)}))}));const p=new(f())("a294542618ad0c79d7b7",{cluster:"ap1"}),w=p.subscribe("public-channel");w.bind("trip-confirmed-event",(async function(e){e.data;l.receivedTripJob=e.data;const t=await l.getGeolocation(),n=await l.getPickUpPosition(),a=await l.getDistanceMatrix(t,n);console.log(a),l.jobDetails={distanceToPickUp:a.rows[0].elements[0].distance.text,durationToPickUp:a.rows[0].elements[0].duration.text},u.value=!0}));const m=(0,a.iH)(null);return(0,n.YP)((()=>l.receivedTripJob),(e=>{l.receivedTripJob&&3===l.receivedTripJob.status&&(m.value=setInterval((async()=>{var e;null===(e=l.channel)||void 0===e||e.trigger("driver-location-event",await l.currentPosition)}),5e3))})),(e,l)=>((0,n.wg)(),(0,n.j4)((0,a.SU)(i._i),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Gu),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.sr),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.wd),null,{default:(0,n.w5)((()=>[(0,n.Uk)("Driver Page")])),_:1})])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.W2),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.PM),{class:"ion-text-center"},{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Zi),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.Dq),null,{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.yW),null,{default:(0,n.w5)((()=>[_])),_:1})])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.FN),{class:"toggle-container"},{default:(0,n.w5)((()=>[(0,n.Wm)((0,a.SU)(i.ho),{mode:"ios"})])),_:1})])),_:1}),(0,n.Wm)((0,a.SU)(i.YG),{onClick:c,expand:"block"},{default:(0,n.w5)((()=>[(0,n.Uk)(" Logout ")])),_:1}),S,(0,n.Wm)(U,{isOpen:u.value,"onUpdate:isOpen":l[0]||(l[0]=e=>u.value=e),tripDetails:t.value,onAccept:r,onDecline:s},null,8,["isOpen","tripDetails"])])),_:1})])),_:1}))}});var k=t(3744);const v=(0,k.Z)(W,[["__scopeId","data-v-3ff606f6"]]),b=v}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
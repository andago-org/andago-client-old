"use strict";(self["webpackChunkandago_client"]=self["webpackChunkandago_client"]||[]).push([[990],{8990:(e,t,n)=>{n.r(t),n.d(t,{createSwipeBackGesture:()=>i});var r=n(6587),a=n(545),c=n(6515);
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const i=(e,t,n,i,o)=>{const s=e.ownerDocument.defaultView;let l=(0,a.i)(e);const u=e=>{const t=50,{startX:n}=e;return l?n>=s.innerWidth-t:n<=t},d=e=>l?-e.deltaX:e.deltaX,h=e=>l?-e.velocityX:e.velocityX,k=n=>(l=(0,a.i)(e),u(n)&&t()),w=e=>{const t=d(e),n=t/s.innerWidth;i(n)},g=e=>{const t=d(e),n=s.innerWidth,a=t/n,c=h(e),i=n/2,l=c>=0&&(c>.2||t>i),u=l?1-a:a,k=u*n;let w=0;if(k>5){const e=k/Math.abs(c);w=Math.min(e,540)}o(l,a<=0?.01:(0,r.h)(0,a,.9999),w)};return(0,c.createGesture)({el:e,gestureName:"goback-swipe",gesturePriority:40,threshold:10,canStart:k,onStart:n,onMove:w,onEnd:g})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvOTkwLmM0NTVjNWRiLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFPQSxNQUFNQSxFQUF5QixDQUFDQyxFQUFJQyxFQUFpQkMsRUFBZ0JDLEVBQWVDLEtBQ2xGLE1BQU1DLEVBQU1MLEVBQUdNLGNBQWNDLFlBQzdCLElBQUlDLEdBQU0sSUFBQUMsR0FBTVQsR0FNaEIsTUFBTVUsRUFBWUMsSUFDaEIsTUFBTUMsRUFBWSxJQUNaLE9BQUVDLEdBQVdGLEVBQ25CLE9BQUlILEVBQ0tLLEdBQVVSLEVBQUlTLFdBQWFGLEVBRTdCQyxHQUFVRCxDQUFTLEVBRXRCRyxFQUFhSixHQUNWSCxHQUFPRyxFQUFPSyxPQUFTTCxFQUFPSyxPQUVqQ0MsRUFBZ0JOLEdBQ2JILEdBQU9HLEVBQU9PLFVBQVlQLEVBQU9PLFVBRXBDQyxFQUFZUixJQU1oQkgsR0FBTSxJQUFBQyxHQUFNVCxHQUNMVSxFQUFTQyxJQUFXVixLQUV2Qm1CLEVBQVVULElBRWQsTUFBTVUsRUFBUU4sRUFBVUosR0FDbEJXLEVBQVlELEVBQVFoQixFQUFJUyxXQUM5QlgsRUFBY21CLEVBQVUsRUFFcEJDLEVBQVNaLElBRWIsTUFBTVUsRUFBUU4sRUFBVUosR0FDbEJhLEVBQVFuQixFQUFJUyxXQUNaUSxFQUFZRCxFQUFRRyxFQUNwQkMsRUFBV1IsRUFBYU4sR0FDeEJlLEVBQUlGLEVBQVEsRUFDWkcsRUFBaUJGLEdBQVksSUFBTUEsRUFBVyxJQUFPSixFQUFRSyxHQUM3REUsRUFBVUQsRUFBaUIsRUFBSUwsRUFBWUEsRUFDM0NPLEVBQWtCRCxFQUFVSixFQUNsQyxJQUFJTSxFQUFVLEVBQ2QsR0FBSUQsRUFBa0IsRUFBRyxDQUN2QixNQUFNRSxFQUFNRixFQUFrQkcsS0FBS0MsSUFBSVIsR0FDdkNLLEVBQVVFLEtBQUtFLElBQUlILEVBQUssSUFDMUIsQ0FDQTNCLEVBQWF1QixFQUFnQkwsR0FBYSxFQUFJLEtBQU8sT0FBTSxFQUFHQSxFQUFXLE9BQVNRLEVBQVEsRUFFNUYsT0FBTyxJQUFBSyxlQUFjLENBQ25CbkMsS0FDQW9DLFlBQWEsZUFDYkMsZ0JBQWlCLEdBQ2pCekIsVUFBVyxHQUNYTyxXQUNBbUIsUUFBU3BDLEVBQ1RrQixTQUNBRyxTQUNBLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmRhZ28tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2NvbXBvbmVudHMvc3dpcGUtYmFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgaCBhcyBjbGFtcCB9IGZyb20gJy4vaGVscGVycy5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzUlRMIH0gZnJvbSAnLi9kaXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlR2VzdHVyZSB9IGZyb20gJy4vaW5kZXgyLmpzJztcblxuY29uc3QgY3JlYXRlU3dpcGVCYWNrR2VzdHVyZSA9IChlbCwgY2FuU3RhcnRIYW5kbGVyLCBvblN0YXJ0SGFuZGxlciwgb25Nb3ZlSGFuZGxlciwgb25FbmRIYW5kbGVyKSA9PiB7XG4gIGNvbnN0IHdpbiA9IGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGxldCBydGwgPSBpc1JUTChlbCk7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgYSBnZXN0dXJlIGlzIG5lYXIgdGhlIGVkZ2VcbiAgICogb2YgdGhlIHNjcmVlbi4gSWYgdHJ1ZSwgdGhlbiB0aGUgc3dpcGVcbiAgICogdG8gZ28gYmFjayBnZXN0dXJlIHNob3VsZCBwcm9jZWVkLlxuICAgKi9cbiAgY29uc3QgaXNBdEVkZ2UgPSAoZGV0YWlsKSA9PiB7XG4gICAgY29uc3QgdGhyZXNob2xkID0gNTA7XG4gICAgY29uc3QgeyBzdGFydFggfSA9IGRldGFpbDtcbiAgICBpZiAocnRsKSB7XG4gICAgICByZXR1cm4gc3RhcnRYID49IHdpbi5pbm5lcldpZHRoIC0gdGhyZXNob2xkO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnRYIDw9IHRocmVzaG9sZDtcbiAgfTtcbiAgY29uc3QgZ2V0RGVsdGFYID0gKGRldGFpbCkgPT4ge1xuICAgIHJldHVybiBydGwgPyAtZGV0YWlsLmRlbHRhWCA6IGRldGFpbC5kZWx0YVg7XG4gIH07XG4gIGNvbnN0IGdldFZlbG9jaXR5WCA9IChkZXRhaWwpID0+IHtcbiAgICByZXR1cm4gcnRsID8gLWRldGFpbC52ZWxvY2l0eVggOiBkZXRhaWwudmVsb2NpdHlYO1xuICB9O1xuICBjb25zdCBjYW5TdGFydCA9IChkZXRhaWwpID0+IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdXNlcidzIGxvY2FsZSBjYW4gY2hhbmdlIG1pZC1zZXNzaW9uLFxuICAgICAqIHNvIHdlIG5lZWQgdG8gY2hlY2sgdGV4dCBkaXJlY3Rpb24gYXRcbiAgICAgKiB0aGUgYmVnaW5uaW5nIG9mIGV2ZXJ5IGdlc3R1cmUuXG4gICAgICovXG4gICAgcnRsID0gaXNSVEwoZWwpO1xuICAgIHJldHVybiBpc0F0RWRnZShkZXRhaWwpICYmIGNhblN0YXJ0SGFuZGxlcigpO1xuICB9O1xuICBjb25zdCBvbk1vdmUgPSAoZGV0YWlsKSA9PiB7XG4gICAgLy8gc2V0IHRoZSB0cmFuc2l0aW9uIGFuaW1hdGlvbidzIHByb2dyZXNzXG4gICAgY29uc3QgZGVsdGEgPSBnZXREZWx0YVgoZGV0YWlsKTtcbiAgICBjb25zdCBzdGVwVmFsdWUgPSBkZWx0YSAvIHdpbi5pbm5lcldpZHRoO1xuICAgIG9uTW92ZUhhbmRsZXIoc3RlcFZhbHVlKTtcbiAgfTtcbiAgY29uc3Qgb25FbmQgPSAoZGV0YWlsKSA9PiB7XG4gICAgLy8gdGhlIHN3aXBlIGJhY2sgZ2VzdHVyZSBoYXMgZW5kZWRcbiAgICBjb25zdCBkZWx0YSA9IGdldERlbHRhWChkZXRhaWwpO1xuICAgIGNvbnN0IHdpZHRoID0gd2luLmlubmVyV2lkdGg7XG4gICAgY29uc3Qgc3RlcFZhbHVlID0gZGVsdGEgLyB3aWR0aDtcbiAgICBjb25zdCB2ZWxvY2l0eSA9IGdldFZlbG9jaXR5WChkZXRhaWwpO1xuICAgIGNvbnN0IHogPSB3aWR0aCAvIDIuMDtcbiAgICBjb25zdCBzaG91bGRDb21wbGV0ZSA9IHZlbG9jaXR5ID49IDAgJiYgKHZlbG9jaXR5ID4gMC4yIHx8IGRlbHRhID4geik7XG4gICAgY29uc3QgbWlzc2luZyA9IHNob3VsZENvbXBsZXRlID8gMSAtIHN0ZXBWYWx1ZSA6IHN0ZXBWYWx1ZTtcbiAgICBjb25zdCBtaXNzaW5nRGlzdGFuY2UgPSBtaXNzaW5nICogd2lkdGg7XG4gICAgbGV0IHJlYWxEdXIgPSAwO1xuICAgIGlmIChtaXNzaW5nRGlzdGFuY2UgPiA1KSB7XG4gICAgICBjb25zdCBkdXIgPSBtaXNzaW5nRGlzdGFuY2UgLyBNYXRoLmFicyh2ZWxvY2l0eSk7XG4gICAgICByZWFsRHVyID0gTWF0aC5taW4oZHVyLCA1NDApO1xuICAgIH1cbiAgICBvbkVuZEhhbmRsZXIoc2hvdWxkQ29tcGxldGUsIHN0ZXBWYWx1ZSA8PSAwID8gMC4wMSA6IGNsYW1wKDAsIHN0ZXBWYWx1ZSwgMC45OTk5KSwgcmVhbER1cik7XG4gIH07XG4gIHJldHVybiBjcmVhdGVHZXN0dXJlKHtcbiAgICBlbCxcbiAgICBnZXN0dXJlTmFtZTogJ2dvYmFjay1zd2lwZScsXG4gICAgZ2VzdHVyZVByaW9yaXR5OiA0MCxcbiAgICB0aHJlc2hvbGQ6IDEwLFxuICAgIGNhblN0YXJ0LFxuICAgIG9uU3RhcnQ6IG9uU3RhcnRIYW5kbGVyLFxuICAgIG9uTW92ZSxcbiAgICBvbkVuZCxcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVTd2lwZUJhY2tHZXN0dXJlIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlU3dpcGVCYWNrR2VzdHVyZSIsImVsIiwiY2FuU3RhcnRIYW5kbGVyIiwib25TdGFydEhhbmRsZXIiLCJvbk1vdmVIYW5kbGVyIiwib25FbmRIYW5kbGVyIiwid2luIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicnRsIiwiaSIsImlzQXRFZGdlIiwiZGV0YWlsIiwidGhyZXNob2xkIiwic3RhcnRYIiwiaW5uZXJXaWR0aCIsImdldERlbHRhWCIsImRlbHRhWCIsImdldFZlbG9jaXR5WCIsInZlbG9jaXR5WCIsImNhblN0YXJ0Iiwib25Nb3ZlIiwiZGVsdGEiLCJzdGVwVmFsdWUiLCJvbkVuZCIsIndpZHRoIiwidmVsb2NpdHkiLCJ6Iiwic2hvdWxkQ29tcGxldGUiLCJtaXNzaW5nIiwibWlzc2luZ0Rpc3RhbmNlIiwicmVhbER1ciIsImR1ciIsIk1hdGgiLCJhYnMiLCJtaW4iLCJjcmVhdGVHZXN0dXJlIiwiZ2VzdHVyZU5hbWUiLCJnZXN0dXJlUHJpb3JpdHkiLCJvblN0YXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==
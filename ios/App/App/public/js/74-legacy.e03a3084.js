"use strict";(self["webpackChunkandago_client"]=self["webpackChunkandago_client"]||[]).push([[74],{4074:(e,t,n)=>{n.r(t),n.d(t,{startTapClick:()=>s});var o=n(6587);
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */const s=e=>{let t,n,s,v=10*-u,f=0;const p=e.getBoolean("animated",!0)&&e.getBoolean("rippleEffect",!0),h=new WeakMap,m=e=>{v=(0,o.u)(e),b(e)},L=e=>{v=(0,o.u)(e),k(e)},w=e=>{if(2===e.button)return;const t=(0,o.u)(e)-u;v<t&&b(e)},E=e=>{const t=(0,o.u)(e)-u;v<t&&k(e)},g=()=>{s&&clearTimeout(s),s=void 0,t&&(y(!1),t=void 0)},b=e=>{t||T(i(e),e)},k=e=>{T(void 0,e)},T=(e,n)=>{if(e&&e===t)return;s&&clearTimeout(s),s=void 0;const{x:i,y:c}=(0,o.p)(n);if(t){if(h.has(t))throw new Error("internal error");t.classList.contains(r)||C(t,i,c),y(!0)}if(e){const t=h.get(e);t&&(clearTimeout(t),h.delete(e)),e.classList.remove(r);const n=()=>{C(e,i,c),s=void 0};a(e)?n():s=setTimeout(n,d)}t=e},C=(e,t,o)=>{if(f=Date.now(),e.classList.add(r),!p)return;const s=c(e);null!==s&&(R(),n=s.addRipple(t,o))},R=()=>{void 0!==n&&(n.then((e=>e())),n=void 0)},y=e=>{R();const n=t;if(!n)return;const o=l-Date.now()+f;if(e&&o>0&&!a(n)){const e=setTimeout((()=>{n.classList.remove(r),h.delete(n)}),l);h.set(n,e)}else n.classList.remove(r)},S=document;S.addEventListener("ionGestureCaptured",g),S.addEventListener("touchstart",m,!0),S.addEventListener("touchcancel",L,!0),S.addEventListener("touchend",L,!0),S.addEventListener("pointercancel",g,!0),S.addEventListener("mousedown",w,!0),S.addEventListener("mouseup",E,!0)},i=e=>{if(void 0===e.composedPath)return e.target.closest(".ion-activatable");{const t=e.composedPath();for(let e=0;e<t.length-2;e++){const n=t[e];if(!(n instanceof ShadowRoot)&&n.classList.contains("ion-activatable"))return n}}},a=e=>e.classList.contains("ion-activatable-instant"),c=e=>{if(e.shadowRoot){const t=e.shadowRoot.querySelector("ion-ripple-effect");if(t)return t}return e.querySelector("ion-ripple-effect")},r="ion-activated",d=200,l=200,u=2500}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
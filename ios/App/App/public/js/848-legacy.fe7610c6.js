(self["webpackChunkandago_client"]=self["webpackChunkandago_client"]||[]).push([[848],{6606:t=>{
/*!
 * Pusher JavaScript Library v8.0.2
 * https://pusher.com/
 *
 * Copyright 2020, Pusher
 * Released under the MIT licence.
 */
(function(e,n){t.exports=n()})(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var o=256,i=function(){function t(t){void 0===t&&(t="="),this._paddingCharacter=t}return t.prototype.encodedLength=function(t){return this._paddingCharacter?(t+2)/3*4|0:(8*t+5)/6|0},t.prototype.encode=function(t){for(var e="",n=0;n<t.length-2;n+=3){var r=t[n]<<16|t[n+1]<<8|t[n+2];e+=this._encodeByte(r>>>18&63),e+=this._encodeByte(r>>>12&63),e+=this._encodeByte(r>>>6&63),e+=this._encodeByte(r>>>0&63)}var o=t.length-n;if(o>0){r=t[n]<<16|(2===o?t[n+1]<<8:0);e+=this._encodeByte(r>>>18&63),e+=this._encodeByte(r>>>12&63),e+=2===o?this._encodeByte(r>>>6&63):this._paddingCharacter||"",e+=this._paddingCharacter||""}return e},t.prototype.maxDecodedLength=function(t){return this._paddingCharacter?t/4*3|0:(6*t+7)/8|0},t.prototype.decodedLength=function(t){return this.maxDecodedLength(t.length-this._getPaddingLength(t))},t.prototype.decode=function(t){if(0===t.length)return new Uint8Array(0);for(var e=this._getPaddingLength(t),n=t.length-e,r=new Uint8Array(this.maxDecodedLength(n)),i=0,s=0,c=0,a=0,u=0,h=0,l=0;s<n-4;s+=4)a=this._decodeChar(t.charCodeAt(s+0)),u=this._decodeChar(t.charCodeAt(s+1)),h=this._decodeChar(t.charCodeAt(s+2)),l=this._decodeChar(t.charCodeAt(s+3)),r[i++]=a<<2|u>>>4,r[i++]=u<<4|h>>>2,r[i++]=h<<6|l,c|=a&o,c|=u&o,c|=h&o,c|=l&o;if(s<n-1&&(a=this._decodeChar(t.charCodeAt(s)),u=this._decodeChar(t.charCodeAt(s+1)),r[i++]=a<<2|u>>>4,c|=a&o,c|=u&o),s<n-2&&(h=this._decodeChar(t.charCodeAt(s+2)),r[i++]=u<<4|h>>>2,c|=h&o),s<n-3&&(l=this._decodeChar(t.charCodeAt(s+3)),r[i++]=h<<6|l,c|=l&o),0!==c)throw new Error("Base64Coder: incorrect characters for decoding");return r},t.prototype._encodeByte=function(t){var e=t;return e+=65,e+=25-t>>>8&6,e+=51-t>>>8&-75,e+=61-t>>>8&-15,e+=62-t>>>8&3,String.fromCharCode(e)},t.prototype._decodeChar=function(t){var e=o;return e+=(42-t&t-44)>>>8&-o+t-43+62,e+=(46-t&t-48)>>>8&-o+t-47+63,e+=(47-t&t-58)>>>8&-o+t-48+52,e+=(64-t&t-91)>>>8&-o+t-65+0,e+=(96-t&t-123)>>>8&-o+t-97+26,e},t.prototype._getPaddingLength=function(t){var e=0;if(this._paddingCharacter){for(var n=t.length-1;n>=0;n--){if(t[n]!==this._paddingCharacter)break;e++}if(t.length<4||e>2)throw new Error("Base64Coder: incorrect padding")}return e},t}();e.Coder=i;var s=new i;function c(t){return s.encode(t)}function a(t){return s.decode(t)}e.encode=c,e.decode=a;var u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype._encodeByte=function(t){var e=t;return e+=65,e+=25-t>>>8&6,e+=51-t>>>8&-75,e+=61-t>>>8&-13,e+=62-t>>>8&49,String.fromCharCode(e)},e.prototype._decodeChar=function(t){var e=o;return e+=(44-t&t-46)>>>8&-o+t-45+62,e+=(94-t&t-96)>>>8&-o+t-95+63,e+=(47-t&t-58)>>>8&-o+t-48+52,e+=(64-t&t-91)>>>8&-o+t-65+0,e+=(96-t&t-123)>>>8&-o+t-97+26,e},e}(i);e.URLSafeCoder=u;var h=new u;function l(t){return h.encode(t)}function p(t){return h.decode(t)}e.encodeURLSafe=l,e.decodeURLSafe=p,e.encodedLength=function(t){return s.encodedLength(t)},e.maxDecodedLength=function(t){return s.maxDecodedLength(t)},e.decodedLength=function(t){return s.decodedLength(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="utf8: invalid string",o="utf8: invalid source encoding";function i(t){for(var e=new Uint8Array(s(t)),n=0,r=0;r<t.length;r++){var o=t.charCodeAt(r);o<128?e[n++]=o:o<2048?(e[n++]=192|o>>6,e[n++]=128|63&o):o<55296?(e[n++]=224|o>>12,e[n++]=128|o>>6&63,e[n++]=128|63&o):(r++,o=(1023&o)<<10,o|=1023&t.charCodeAt(r),o+=65536,e[n++]=240|o>>18,e[n++]=128|o>>12&63,e[n++]=128|o>>6&63,e[n++]=128|63&o)}return e}function s(t){for(var e=0,n=0;n<t.length;n++){var o=t.charCodeAt(n);if(o<128)e+=1;else if(o<2048)e+=2;else if(o<55296)e+=3;else{if(!(o<=57343))throw new Error(r);if(n>=t.length-1)throw new Error(r);n++,e+=4}}return e}function c(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];if(128&r){var i=void 0;if(r<224){if(n>=t.length)throw new Error(o);var s=t[++n];if(128!==(192&s))throw new Error(o);r=(31&r)<<6|63&s,i=128}else if(r<240){if(n>=t.length-1)throw new Error(o);s=t[++n];var c=t[++n];if(128!==(192&s)||128!==(192&c))throw new Error(o);r=(15&r)<<12|(63&s)<<6|63&c,i=2048}else{if(!(r<248))throw new Error(o);if(n>=t.length-2)throw new Error(o);s=t[++n],c=t[++n];var a=t[++n];if(128!==(192&s)||128!==(192&c)||128!==(192&a))throw new Error(o);r=(15&r)<<18|(63&s)<<12|(63&c)<<6|63&a,i=65536}if(r<i||r>=55296&&r<=57343)throw new Error(o);if(r>=65536){if(r>1114111)throw new Error(o);r-=65536,e.push(String.fromCharCode(55296|r>>10)),r=56320|1023&r}}e.push(String.fromCharCode(r))}return e.join("")}e.encode=i,e.encodedLength=s,e.decode=c},function(t,e,n){t.exports=n(3).default},function(t,e,n){"use strict";n.r(e);var r,o=function(){function t(t,e){this.lastId=0,this.prefix=t,this.name=e}return t.prototype.create=function(t){this.lastId++;var e=this.lastId,n=this.prefix+e,r=this.name+"["+e+"]",o=!1,i=function(){o||(t.apply(null,arguments),o=!0)};return this[e]=i,{number:e,id:n,name:r,callback:i}},t.prototype.remove=function(t){delete this[t.number]},t}(),i=new o("_pusher_script_","Pusher.ScriptReceivers"),s={VERSION:"8.0.2",PROTOCOL:7,wsPort:80,wssPort:443,wsPath:"",httpHost:"sockjs.pusher.com",httpPort:80,httpsPort:443,httpPath:"/pusher",stats_host:"stats.pusher.com",authEndpoint:"/pusher/auth",authTransport:"ajax",activityTimeout:12e4,pongTimeout:3e4,unavailableTimeout:1e4,userAuthentication:{endpoint:"/pusher/user-auth",transport:"ajax"},channelAuthorization:{endpoint:"/pusher/auth",transport:"ajax"},cdn_http:"http://js.pusher.com",cdn_https:"https://js.pusher.com",dependency_suffix:""},c=s,a=function(){function t(t){this.options=t,this.receivers=t.receivers||i,this.loading={}}return t.prototype.load=function(t,e,n){var r=this;if(r.loading[t]&&r.loading[t].length>0)r.loading[t].push(n);else{r.loading[t]=[n];var o=In.createScriptRequest(r.getPath(t,e)),i=r.receivers.create((function(e){if(r.receivers.remove(i),r.loading[t]){var n=r.loading[t];delete r.loading[t];for(var s=function(t){t||o.cleanup()},c=0;c<n.length;c++)n[c](e,s)}}));o.send(i)}},t.prototype.getRoot=function(t){var e,n=In.getDocument().location.protocol;return e=t&&t.useTLS||"https:"===n?this.options.cdn_https:this.options.cdn_http,e.replace(/\/*$/,"")+"/"+this.options.version},t.prototype.getPath=function(t,e){return this.getRoot(e)+"/"+t+this.options.suffix+".js"},t}(),u=a,h=new o("_pusher_dependencies","Pusher.DependenciesReceivers"),l=new u({cdn_http:c.cdn_http,cdn_https:c.cdn_https,version:c.VERSION,suffix:c.dependency_suffix,receivers:h}),p={baseUrl:"https://pusher.com",urls:{authenticationEndpoint:{path:"/docs/channels/server_api/authenticating_users"},authorizationEndpoint:{path:"/docs/channels/server_api/authorizing-users/"},javascriptQuickStart:{path:"/docs/javascript_quick_start"},triggeringClientEvents:{path:"/docs/client_api_guide/client_events#trigger-events"},encryptedChannelSupport:{fullUrl:"https://github.com/pusher/pusher-js/tree/cc491015371a4bde5743d1c87a0fbac0feb53195#encrypted-channel-support"}}},f=function(t){var e,n="See:",r=p.urls[t];return r?(r.fullUrl?e=r.fullUrl:r.path&&(e=p.baseUrl+r.path),e?n+" "+e:""):""},d={buildLogSuffix:f};(function(t){t["UserAuthentication"]="user-authentication",t["ChannelAuthorization"]="channel-authorization"})(r||(r={}));var y=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),v=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),g=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),b=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),m=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),_=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),w=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),S=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),k=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return y(e,t),e}(Error),C=function(t){function e(e,n){var r=this.constructor,o=t.call(this,n)||this;return o.status=e,Object.setPrototypeOf(o,r.prototype),o}return y(e,t),e}(Error),P=function(t,e,n,o,i){var s=In.createXHR();for(var c in s.open("POST",n.endpoint,!0),s.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),n.headers)s.setRequestHeader(c,n.headers[c]);if(null!=n.headersProvider){var a=n.headersProvider();for(var c in a)s.setRequestHeader(c,a[c])}return s.onreadystatechange=function(){if(4===s.readyState)if(200===s.status){var t=void 0,e=!1;try{t=JSON.parse(s.responseText),e=!0}catch(a){i(new C(200,"JSON returned from "+o.toString()+" endpoint was invalid, yet status code was 200. Data was: "+s.responseText),null)}e&&i(null,t)}else{var c="";switch(o){case r.UserAuthentication:c=d.buildLogSuffix("authenticationEndpoint");break;case r.ChannelAuthorization:c="Clients must be authorized to join private or presence channels. "+d.buildLogSuffix("authorizationEndpoint");break}i(new C(s.status,"Unable to retrieve auth string from "+o.toString()+" endpoint - received status: "+s.status+" from "+n.endpoint+". "+c),null)}},s.send(e),s},T=P;function O(t){return I(j(t))}for(var E=String.fromCharCode,A="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",x={},L=0,U=A.length;L<U;L++)x[A.charAt(L)]=L;var R=function(t){var e=t.charCodeAt(0);return e<128?t:e<2048?E(192|e>>>6)+E(128|63&e):E(224|e>>>12&15)+E(128|e>>>6&63)+E(128|63&e)},j=function(t){return t.replace(/[^\x00-\x7F]/g,R)},D=function(t){var e=[0,2,1][t.length%3],n=t.charCodeAt(0)<<16|(t.length>1?t.charCodeAt(1):0)<<8|(t.length>2?t.charCodeAt(2):0),r=[A.charAt(n>>>18),A.charAt(n>>>12&63),e>=2?"=":A.charAt(n>>>6&63),e>=1?"=":A.charAt(63&n)];return r.join("")},I=window.btoa||function(t){return t.replace(/[\s\S]{1,3}/g,D)},N=function(){function t(t,e,n,r){var o=this;this.clear=e,this.timer=t((function(){o.timer&&(o.timer=r(o.timer))}),n)}return t.prototype.isRunning=function(){return null!==this.timer},t.prototype.ensureAborted=function(){this.timer&&(this.clear(this.timer),this.timer=null)},t}(),H=N,M=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function z(t){window.clearTimeout(t)}function W(t){window.clearInterval(t)}var q=function(t){function e(e,n){return t.call(this,setTimeout,z,e,(function(t){return n(),null}))||this}return M(e,t),e}(H),B=function(t){function e(e,n){return t.call(this,setInterval,W,e,(function(t){return n(),t}))||this}return M(e,t),e}(H),F={now:function(){return Date.now?Date.now():(new Date).valueOf()},defer:function(t){return new q(0,t)},method:function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=Array.prototype.slice.call(arguments,1);return function(e){return e[t].apply(e,r.concat(arguments))}}},J=F;function X(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=0;r<e.length;r++){var o=e[r];for(var i in o)o[i]&&o[i].constructor&&o[i].constructor===Object?t[i]=X(t[i]||{},o[i]):t[i]=o[i]}return t}function G(){for(var t=["Pusher"],e=0;e<arguments.length;e++)"string"===typeof arguments[e]?t.push(arguments[e]):t.push(ut(arguments[e]));return t.join(" : ")}function $(t,e){var n=Array.prototype.indexOf;if(null===t)return-1;if(n&&t.indexOf===n)return t.indexOf(e);for(var r=0,o=t.length;r<o;r++)if(t[r]===e)return r;return-1}function Q(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(t[n],n,t)}function Y(t){var e=[];return Q(t,(function(t,n){e.push(n)})),e}function V(t){var e=[];return Q(t,(function(t){e.push(t)})),e}function Z(t,e,n){for(var r=0;r<t.length;r++)e.call(n||window,t[r],r,t)}function K(t,e){for(var n=[],r=0;r<t.length;r++)n.push(e(t[r],r,t,n));return n}function tt(t,e){var n={};return Q(t,(function(t,r){n[r]=e(t)})),n}function et(t,e){e=e||function(t){return!!t};for(var n=[],r=0;r<t.length;r++)e(t[r],r,t,n)&&n.push(t[r]);return n}function nt(t,e){var n={};return Q(t,(function(r,o){(e&&e(r,o,t,n)||Boolean(r))&&(n[o]=r)})),n}function rt(t){var e=[];return Q(t,(function(t,n){e.push([n,t])})),e}function ot(t,e){for(var n=0;n<t.length;n++)if(e(t[n],n,t))return!0;return!1}function it(t,e){for(var n=0;n<t.length;n++)if(!e(t[n],n,t))return!1;return!0}function st(t){return tt(t,(function(t){return"object"===typeof t&&(t=ut(t)),encodeURIComponent(O(t.toString()))}))}function ct(t){var e=nt(t,(function(t){return void 0!==t})),n=K(rt(st(e)),J.method("join","=")).join("&");return n}function at(t){var e=[],n=[];return function t(r,o){var i,s,c;switch(typeof r){case"object":if(!r)return null;for(i=0;i<e.length;i+=1)if(e[i]===r)return{$ref:n[i]};if(e.push(r),n.push(o),"[object Array]"===Object.prototype.toString.apply(r))for(c=[],i=0;i<r.length;i+=1)c[i]=t(r[i],o+"["+i+"]");else for(s in c={},r)Object.prototype.hasOwnProperty.call(r,s)&&(c[s]=t(r[s],o+"["+JSON.stringify(s)+"]"));return c;case"number":case"string":case"boolean":return r}}(t,"$")}function ut(t){try{return JSON.stringify(t)}catch(e){return JSON.stringify(at(t))}}var ht=function(){function t(){this.globalLog=function(t){window.console&&window.console.log&&window.console.log(t)}}return t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.log(this.globalLog,t)},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.log(this.globalLogWarn,t)},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.log(this.globalLogError,t)},t.prototype.globalLogWarn=function(t){window.console&&window.console.warn?window.console.warn(t):this.globalLog(t)},t.prototype.globalLogError=function(t){window.console&&window.console.error?window.console.error(t):this.globalLogWarn(t)},t.prototype.log=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=G.apply(this,arguments);if(mr.log)mr.log(r);else if(mr.logToConsole){var o=t.bind(this);o(r)}},t}(),lt=new ht,pt=function(t,e,n,r,o){void 0===n.headers&&null==n.headersProvider||lt.warn("To send headers with the "+r.toString()+" request, you must use AJAX, rather than JSONP.");var i=t.nextAuthCallbackID.toString();t.nextAuthCallbackID++;var s=t.getDocument(),c=s.createElement("script");t.auth_callbacks[i]=function(t){o(null,t)};var a="Pusher.auth_callbacks['"+i+"']";c.src=n.endpoint+"?callback="+encodeURIComponent(a)+"&"+e;var u=s.getElementsByTagName("head")[0]||s.documentElement;u.insertBefore(c,u.firstChild)},ft=pt,dt=function(){function t(t){this.src=t}return t.prototype.send=function(t){var e=this,n="Error loading "+e.src;e.script=document.createElement("script"),e.script.id=t.id,e.script.src=e.src,e.script.type="text/javascript",e.script.charset="UTF-8",e.script.addEventListener?(e.script.onerror=function(){t.callback(n)},e.script.onload=function(){t.callback(null)}):e.script.onreadystatechange=function(){"loaded"!==e.script.readyState&&"complete"!==e.script.readyState||t.callback(null)},void 0===e.script.async&&document.attachEvent&&/opera/i.test(navigator.userAgent)?(e.errorScript=document.createElement("script"),e.errorScript.id=t.id+"_error",e.errorScript.text=t.name+"('"+n+"');",e.script.async=e.errorScript.async=!1):e.script.async=!0;var r=document.getElementsByTagName("head")[0];r.insertBefore(e.script,r.firstChild),e.errorScript&&r.insertBefore(e.errorScript,e.script.nextSibling)},t.prototype.cleanup=function(){this.script&&(this.script.onload=this.script.onerror=null,this.script.onreadystatechange=null),this.script&&this.script.parentNode&&this.script.parentNode.removeChild(this.script),this.errorScript&&this.errorScript.parentNode&&this.errorScript.parentNode.removeChild(this.errorScript),this.script=null,this.errorScript=null},t}(),yt=dt,vt=function(){function t(t,e){this.url=t,this.data=e}return t.prototype.send=function(t){if(!this.request){var e=ct(this.data),n=this.url+"/"+t.number+"?"+e;this.request=In.createScriptRequest(n),this.request.send(t)}},t.prototype.cleanup=function(){this.request&&this.request.cleanup()},t}(),gt=vt,bt=function(t,e){return function(n,r){var o="http"+(e?"s":"")+"://",s=o+(t.host||t.options.host)+t.options.path,c=In.createJSONPRequest(s,n),a=In.ScriptReceivers.create((function(e,n){i.remove(a),c.cleanup(),n&&n.host&&(t.host=n.host),r&&r(e,n)}));c.send(a)}},mt={name:"jsonp",getAgent:bt},_t=mt;function wt(t,e,n){var r=t+(e.useTLS?"s":""),o=e.useTLS?e.hostTLS:e.hostNonTLS;return r+"://"+o+n}function St(t,e){var n="/app/"+t,r="?protocol="+c.PROTOCOL+"&client=js&version="+c.VERSION+(e?"&"+e:"");return n+r}var kt={getInitial:function(t,e){var n=(e.httpPath||"")+St(t,"flash=false");return wt("ws",e,n)}},Ct={getInitial:function(t,e){var n=(e.httpPath||"/pusher")+St(t);return wt("http",e,n)}},Pt={getInitial:function(t,e){return wt("http",e,e.httpPath||"/pusher")},getPath:function(t,e){return St(t)}},Tt=function(){function t(){this._callbacks={}}return t.prototype.get=function(t){return this._callbacks[Et(t)]},t.prototype.add=function(t,e,n){var r=Et(t);this._callbacks[r]=this._callbacks[r]||[],this._callbacks[r].push({fn:e,context:n})},t.prototype.remove=function(t,e,n){if(t||e||n){var r=t?[Et(t)]:Y(this._callbacks);e||n?this.removeCallback(r,e,n):this.removeAllCallbacks(r)}else this._callbacks={}},t.prototype.removeCallback=function(t,e,n){Z(t,(function(t){this._callbacks[t]=et(this._callbacks[t]||[],(function(t){return e&&e!==t.fn||n&&n!==t.context})),0===this._callbacks[t].length&&delete this._callbacks[t]}),this)},t.prototype.removeAllCallbacks=function(t){Z(t,(function(t){delete this._callbacks[t]}),this)},t}(),Ot=Tt;function Et(t){return"_"+t}var At=function(){function t(t){this.callbacks=new Ot,this.global_callbacks=[],this.failThrough=t}return t.prototype.bind=function(t,e,n){return this.callbacks.add(t,e,n),this},t.prototype.bind_global=function(t){return this.global_callbacks.push(t),this},t.prototype.unbind=function(t,e,n){return this.callbacks.remove(t,e,n),this},t.prototype.unbind_global=function(t){return t?(this.global_callbacks=et(this.global_callbacks||[],(function(e){return e!==t})),this):(this.global_callbacks=[],this)},t.prototype.unbind_all=function(){return this.unbind(),this.unbind_global(),this},t.prototype.emit=function(t,e,n){for(var r=0;r<this.global_callbacks.length;r++)this.global_callbacks[r](t,e);var o=this.callbacks.get(t),i=[];if(n?i.push(e,n):e&&i.push(e),o&&o.length>0)for(r=0;r<o.length;r++)o[r].fn.apply(o[r].context||window,i);else this.failThrough&&this.failThrough(t,e);return this},t}(),xt=At,Lt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ut=function(t){function e(e,n,r,o,i){var s=t.call(this)||this;return s.initialize=In.transportConnectionInitializer,s.hooks=e,s.name=n,s.priority=r,s.key=o,s.options=i,s.state="new",s.timeline=i.timeline,s.activityTimeout=i.activityTimeout,s.id=s.timeline.generateUniqueID(),s}return Lt(e,t),e.prototype.handlesActivityChecks=function(){return Boolean(this.hooks.handlesActivityChecks)},e.prototype.supportsPing=function(){return Boolean(this.hooks.supportsPing)},e.prototype.connect=function(){var t=this;if(this.socket||"initialized"!==this.state)return!1;var e=this.hooks.urls.getInitial(this.key,this.options);try{this.socket=this.hooks.getSocket(e,this.options)}catch(n){return J.defer((function(){t.onError(n),t.changeState("closed")})),!1}return this.bindListeners(),lt.debug("Connecting",{transport:this.name,url:e}),this.changeState("connecting"),!0},e.prototype.close=function(){return!!this.socket&&(this.socket.close(),!0)},e.prototype.send=function(t){var e=this;return"open"===this.state&&(J.defer((function(){e.socket&&e.socket.send(t)})),!0)},e.prototype.ping=function(){"open"===this.state&&this.supportsPing()&&this.socket.ping()},e.prototype.onOpen=function(){this.hooks.beforeOpen&&this.hooks.beforeOpen(this.socket,this.hooks.urls.getPath(this.key,this.options)),this.changeState("open"),this.socket.onopen=void 0},e.prototype.onError=function(t){this.emit("error",{type:"WebSocketError",error:t}),this.timeline.error(this.buildTimelineMessage({error:t.toString()}))},e.prototype.onClose=function(t){t?this.changeState("closed",{code:t.code,reason:t.reason,wasClean:t.wasClean}):this.changeState("closed"),this.unbindListeners(),this.socket=void 0},e.prototype.onMessage=function(t){this.emit("message",t)},e.prototype.onActivity=function(){this.emit("activity")},e.prototype.bindListeners=function(){var t=this;this.socket.onopen=function(){t.onOpen()},this.socket.onerror=function(e){t.onError(e)},this.socket.onclose=function(e){t.onClose(e)},this.socket.onmessage=function(e){t.onMessage(e)},this.supportsPing()&&(this.socket.onactivity=function(){t.onActivity()})},e.prototype.unbindListeners=function(){this.socket&&(this.socket.onopen=void 0,this.socket.onerror=void 0,this.socket.onclose=void 0,this.socket.onmessage=void 0,this.supportsPing()&&(this.socket.onactivity=void 0))},e.prototype.changeState=function(t,e){this.state=t,this.timeline.info(this.buildTimelineMessage({state:t,params:e})),this.emit(t,e)},e.prototype.buildTimelineMessage=function(t){return X({cid:this.id},t)},e}(xt),Rt=Ut,jt=function(){function t(t){this.hooks=t}return t.prototype.isSupported=function(t){return this.hooks.isSupported(t)},t.prototype.createConnection=function(t,e,n,r){return new Rt(this.hooks,t,e,n,r)},t}(),Dt=jt,It=new Dt({urls:kt,handlesActivityChecks:!1,supportsPing:!1,isInitialized:function(){return Boolean(In.getWebSocketAPI())},isSupported:function(){return Boolean(In.getWebSocketAPI())},getSocket:function(t){return In.createWebSocket(t)}}),Nt={urls:Ct,handlesActivityChecks:!1,supportsPing:!0,isInitialized:function(){return!0}},Ht=X({getSocket:function(t){return In.HTTPFactory.createStreamingSocket(t)}},Nt),Mt=X({getSocket:function(t){return In.HTTPFactory.createPollingSocket(t)}},Nt),zt={isSupported:function(){return In.isXHRSupported()}},Wt=new Dt(X({},Ht,zt)),qt=new Dt(X({},Mt,zt)),Bt={ws:It,xhr_streaming:Wt,xhr_polling:qt},Ft=Bt,Jt=new Dt({file:"sockjs",urls:Pt,handlesActivityChecks:!0,supportsPing:!1,isSupported:function(){return!0},isInitialized:function(){return void 0!==window.SockJS},getSocket:function(t,e){return new window.SockJS(t,null,{js_path:l.getPath("sockjs",{useTLS:e.useTLS}),ignore_null_origin:e.ignoreNullOrigin})},beforeOpen:function(t,e){t.send(JSON.stringify({path:e}))}}),Xt={isSupported:function(t){var e=In.isXDRSupported(t.useTLS);return e}},Gt=new Dt(X({},Ht,Xt)),$t=new Dt(X({},Mt,Xt));Ft.xdr_streaming=Gt,Ft.xdr_polling=$t,Ft.sockjs=Jt;var Qt=Ft,Yt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Vt=function(t){function e(){var e=t.call(this)||this,n=e;return void 0!==window.addEventListener&&(window.addEventListener("online",(function(){n.emit("online")}),!1),window.addEventListener("offline",(function(){n.emit("offline")}),!1)),e}return Yt(e,t),e.prototype.isOnline=function(){return void 0===window.navigator.onLine||window.navigator.onLine},e}(xt),Zt=new Vt,Kt=function(){function t(t,e,n){this.manager=t,this.transport=e,this.minPingDelay=n.minPingDelay,this.maxPingDelay=n.maxPingDelay,this.pingDelay=void 0}return t.prototype.createConnection=function(t,e,n,r){var o=this;r=X({},r,{activityTimeout:this.pingDelay});var i=this.transport.createConnection(t,e,n,r),s=null,c=function(){i.unbind("open",c),i.bind("closed",a),s=J.now()},a=function(t){if(i.unbind("closed",a),1002===t.code||1003===t.code)o.manager.reportDeath();else if(!t.wasClean&&s){var e=J.now()-s;e<2*o.maxPingDelay&&(o.manager.reportDeath(),o.pingDelay=Math.max(e/2,o.minPingDelay))}};return i.bind("open",c),i},t.prototype.isSupported=function(t){return this.manager.isAlive()&&this.transport.isSupported(t)},t}(),te=Kt,ee={decodeMessage:function(t){try{var e=JSON.parse(t.data),n=e.data;if("string"===typeof n)try{n=JSON.parse(e.data)}catch(o){}var r={event:e.event,channel:e.channel,data:n};return e.user_id&&(r.user_id=e.user_id),r}catch(o){throw{type:"MessageParseError",error:o,data:t.data}}},encodeMessage:function(t){return JSON.stringify(t)},processHandshake:function(t){var e=ee.decodeMessage(t);if("pusher:connection_established"===e.event){if(!e.data.activity_timeout)throw"No activity timeout specified in handshake";return{action:"connected",id:e.data.socket_id,activityTimeout:1e3*e.data.activity_timeout}}if("pusher:error"===e.event)return{action:this.getCloseAction(e.data),error:this.getCloseError(e.data)};throw"Invalid handshake"},getCloseAction:function(t){return t.code<4e3?t.code>=1002&&t.code<=1004?"backoff":null:4e3===t.code?"tls_only":t.code<4100?"refused":t.code<4200?"backoff":t.code<4300?"retry":"refused"},getCloseError:function(t){return 1e3!==t.code&&1001!==t.code?{type:"PusherError",data:{code:t.code,message:t.reason||t.message}}:null}},ne=ee,re=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),oe=function(t){function e(e,n){var r=t.call(this)||this;return r.id=e,r.transport=n,r.activityTimeout=n.activityTimeout,r.bindListeners(),r}return re(e,t),e.prototype.handlesActivityChecks=function(){return this.transport.handlesActivityChecks()},e.prototype.send=function(t){return this.transport.send(t)},e.prototype.send_event=function(t,e,n){var r={event:t,data:e};return n&&(r.channel=n),lt.debug("Event sent",r),this.send(ne.encodeMessage(r))},e.prototype.ping=function(){this.transport.supportsPing()?this.transport.ping():this.send_event("pusher:ping",{})},e.prototype.close=function(){this.transport.close()},e.prototype.bindListeners=function(){var t=this,e={message:function(e){var n;try{n=ne.decodeMessage(e)}catch(r){t.emit("error",{type:"MessageParseError",error:r,data:e.data})}if(void 0!==n){switch(lt.debug("Event recd",n),n.event){case"pusher:error":t.emit("error",{type:"PusherError",data:n.data});break;case"pusher:ping":t.emit("ping");break;case"pusher:pong":t.emit("pong");break}t.emit("message",n)}},activity:function(){t.emit("activity")},error:function(e){t.emit("error",e)},closed:function(e){n(),e&&e.code&&t.handleCloseEvent(e),t.transport=null,t.emit("closed")}},n=function(){Q(e,(function(e,n){t.transport.unbind(n,e)}))};Q(e,(function(e,n){t.transport.bind(n,e)}))},e.prototype.handleCloseEvent=function(t){var e=ne.getCloseAction(t),n=ne.getCloseError(t);n&&this.emit("error",n),e&&this.emit(e,{action:e,error:n})},e}(xt),ie=oe,se=function(){function t(t,e){this.transport=t,this.callback=e,this.bindListeners()}return t.prototype.close=function(){this.unbindListeners(),this.transport.close()},t.prototype.bindListeners=function(){var t=this;this.onMessage=function(e){var n;t.unbindListeners();try{n=ne.processHandshake(e)}catch(r){return t.finish("error",{error:r}),void t.transport.close()}"connected"===n.action?t.finish("connected",{connection:new ie(n.id,t.transport),activityTimeout:n.activityTimeout}):(t.finish(n.action,{error:n.error}),t.transport.close())},this.onClosed=function(e){t.unbindListeners();var n=ne.getCloseAction(e)||"backoff",r=ne.getCloseError(e);t.finish(n,{error:r})},this.transport.bind("message",this.onMessage),this.transport.bind("closed",this.onClosed)},t.prototype.unbindListeners=function(){this.transport.unbind("message",this.onMessage),this.transport.unbind("closed",this.onClosed)},t.prototype.finish=function(t,e){this.callback(X({transport:this.transport,action:t},e))},t}(),ce=se,ae=function(){function t(t,e){this.timeline=t,this.options=e||{}}return t.prototype.send=function(t,e){this.timeline.isEmpty()||this.timeline.send(In.TimelineTransport.getAgent(this,t),e)},t}(),ue=ae,he=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),le=function(t){function e(e,n){var r=t.call(this,(function(t,n){lt.debug("No callbacks on "+e+" for "+t)}))||this;return r.name=e,r.pusher=n,r.subscribed=!1,r.subscriptionPending=!1,r.subscriptionCancelled=!1,r}return he(e,t),e.prototype.authorize=function(t,e){return e(null,{auth:""})},e.prototype.trigger=function(t,e){if(0!==t.indexOf("client-"))throw new v("Event '"+t+"' does not start with 'client-'");if(!this.subscribed){var n=d.buildLogSuffix("triggeringClientEvents");lt.warn("Client event triggered before channel 'subscription_succeeded' event . "+n)}return this.pusher.send_event(t,e,this.name)},e.prototype.disconnect=function(){this.subscribed=!1,this.subscriptionPending=!1},e.prototype.handleEvent=function(t){var e=t.event,n=t.data;if("pusher_internal:subscription_succeeded"===e)this.handleSubscriptionSucceededEvent(t);else if("pusher_internal:subscription_count"===e)this.handleSubscriptionCountEvent(t);else if(0!==e.indexOf("pusher_internal:")){var r={};this.emit(e,n,r)}},e.prototype.handleSubscriptionSucceededEvent=function(t){this.subscriptionPending=!1,this.subscribed=!0,this.subscriptionCancelled?this.pusher.unsubscribe(this.name):this.emit("pusher:subscription_succeeded",t.data)},e.prototype.handleSubscriptionCountEvent=function(t){t.data.subscription_count&&(this.subscriptionCount=t.data.subscription_count),this.emit("pusher:subscription_count",t.data)},e.prototype.subscribe=function(){var t=this;this.subscribed||(this.subscriptionPending=!0,this.subscriptionCancelled=!1,this.authorize(this.pusher.connection.socket_id,(function(e,n){e?(t.subscriptionPending=!1,lt.error(e.toString()),t.emit("pusher:subscription_error",Object.assign({},{type:"AuthError",error:e.message},e instanceof C?{status:e.status}:{}))):t.pusher.send_event("pusher:subscribe",{auth:n.auth,channel_data:n.channel_data,channel:t.name})})))},e.prototype.unsubscribe=function(){this.subscribed=!1,this.pusher.send_event("pusher:unsubscribe",{channel:this.name})},e.prototype.cancelSubscription=function(){this.subscriptionCancelled=!0},e.prototype.reinstateSubscription=function(){this.subscriptionCancelled=!1},e}(xt),pe=le,fe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),de=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return fe(e,t),e.prototype.authorize=function(t,e){return this.pusher.config.channelAuthorizer({channelName:this.name,socketId:t},e)},e}(pe),ye=de,ve=function(){function t(){this.reset()}return t.prototype.get=function(t){return Object.prototype.hasOwnProperty.call(this.members,t)?{id:t,info:this.members[t]}:null},t.prototype.each=function(t){var e=this;Q(this.members,(function(n,r){t(e.get(r))}))},t.prototype.setMyID=function(t){this.myID=t},t.prototype.onSubscription=function(t){this.members=t.presence.hash,this.count=t.presence.count,this.me=this.get(this.myID)},t.prototype.addMember=function(t){return null===this.get(t.user_id)&&this.count++,this.members[t.user_id]=t.user_info,this.get(t.user_id)},t.prototype.removeMember=function(t){var e=this.get(t.user_id);return e&&(delete this.members[t.user_id],this.count--),e},t.prototype.reset=function(){this.members={},this.count=0,this.myID=null,this.me=null},t}(),ge=ve,be=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),me=function(t,e,n,r){function o(t){return t instanceof n?t:new n((function(e){e(t)}))}return new(n||(n=Promise))((function(n,i){function s(t){try{a(r.next(t))}catch(e){i(e)}}function c(t){try{a(r["throw"](t))}catch(e){i(e)}}function a(t){t.done?n(t.value):o(t.value).then(s,c)}a((r=r.apply(t,e||[])).next())}))},_e=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"===typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(t){return function(e){return a([t,e])}}function a(i){if(n)throw new TypeError("Generator is already executing.");while(s)try{if(n=1,r&&(o=2&i[0]?r["return"]:i[0]?r["throw"]||((o=r["return"])&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(o=s.trys,!(o=o.length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(c){i=[6,c],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}},we=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.members=new ge,r}return be(e,t),e.prototype.authorize=function(e,n){var r=this;t.prototype.authorize.call(this,e,(function(t,e){return me(r,void 0,void 0,(function(){var r,o;return _e(this,(function(i){switch(i.label){case 0:return t?[3,3]:null==e.channel_data?[3,1]:(r=JSON.parse(e.channel_data),this.members.setMyID(r.user_id),[3,3]);case 1:return[4,this.pusher.user.signinDonePromise];case 2:if(i.sent(),null==this.pusher.user.user_data)return o=d.buildLogSuffix("authorizationEndpoint"),lt.error("Invalid auth response for channel '"+this.name+"', expected 'channel_data' field. "+o+", or the user should be signed in."),n("Invalid auth response"),[2];this.members.setMyID(this.pusher.user.user_data.id),i.label=3;case 3:return n(t,e),[2]}}))}))}))},e.prototype.handleEvent=function(t){var e=t.event;if(0===e.indexOf("pusher_internal:"))this.handleInternalEvent(t);else{var n=t.data,r={};t.user_id&&(r.user_id=t.user_id),this.emit(e,n,r)}},e.prototype.handleInternalEvent=function(t){var e=t.event,n=t.data;switch(e){case"pusher_internal:subscription_succeeded":this.handleSubscriptionSucceededEvent(t);break;case"pusher_internal:subscription_count":this.handleSubscriptionCountEvent(t);break;case"pusher_internal:member_added":var r=this.members.addMember(n);this.emit("pusher:member_added",r);break;case"pusher_internal:member_removed":var o=this.members.removeMember(n);o&&this.emit("pusher:member_removed",o);break}},e.prototype.handleSubscriptionSucceededEvent=function(t){this.subscriptionPending=!1,this.subscribed=!0,this.subscriptionCancelled?this.pusher.unsubscribe(this.name):(this.members.onSubscription(t.data),this.emit("pusher:subscription_succeeded",this.members))},e.prototype.disconnect=function(){this.members.reset(),t.prototype.disconnect.call(this)},e}(ye),Se=we,ke=n(1),Ce=n(0),Pe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Te=function(t){function e(e,n,r){var o=t.call(this,e,n)||this;return o.key=null,o.nacl=r,o}return Pe(e,t),e.prototype.authorize=function(e,n){var r=this;t.prototype.authorize.call(this,e,(function(t,e){if(t)n(t,e);else{var o=e["shared_secret"];o?(r.key=Object(Ce["decode"])(o),delete e["shared_secret"],n(null,e)):n(new Error("No shared_secret key in auth payload for encrypted channel: "+r.name),null)}}))},e.prototype.trigger=function(t,e){throw new w("Client events are not currently supported for encrypted channels")},e.prototype.handleEvent=function(e){var n=e.event,r=e.data;0!==n.indexOf("pusher_internal:")&&0!==n.indexOf("pusher:")?this.handleEncryptedEvent(n,r):t.prototype.handleEvent.call(this,e)},e.prototype.handleEncryptedEvent=function(t,e){var n=this;if(this.key)if(e.ciphertext&&e.nonce){var r=Object(Ce["decode"])(e.ciphertext);if(r.length<this.nacl.secretbox.overheadLength)lt.error("Expected encrypted event ciphertext length to be "+this.nacl.secretbox.overheadLength+", got: "+r.length);else{var o=Object(Ce["decode"])(e.nonce);if(o.length<this.nacl.secretbox.nonceLength)lt.error("Expected encrypted event nonce length to be "+this.nacl.secretbox.nonceLength+", got: "+o.length);else{var i=this.nacl.secretbox.open(r,o,this.key);if(null===i)return lt.debug("Failed to decrypt an event, probably because it was encrypted with a different key. Fetching a new key from the authEndpoint..."),void this.authorize(this.pusher.connection.socket_id,(function(e,s){e?lt.error("Failed to make a request to the authEndpoint: "+s+". Unable to fetch new key, so dropping encrypted event"):(i=n.nacl.secretbox.open(r,o,n.key),null!==i?n.emit(t,n.getDataToEmit(i)):lt.error("Failed to decrypt event with new key. Dropping encrypted event"))}));this.emit(t,this.getDataToEmit(i))}}}else lt.error("Unexpected format for encrypted event, expected object with `ciphertext` and `nonce` fields, got: "+e);else lt.debug("Received encrypted event before key has been retrieved from the authEndpoint")},e.prototype.getDataToEmit=function(t){var e=Object(ke["decode"])(t);try{return JSON.parse(e)}catch(n){return e}},e}(ye),Oe=Te,Ee=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ae=function(t){function e(e,n){var r=t.call(this)||this;r.state="initialized",r.connection=null,r.key=e,r.options=n,r.timeline=r.options.timeline,r.usingTLS=r.options.useTLS,r.errorCallbacks=r.buildErrorCallbacks(),r.connectionCallbacks=r.buildConnectionCallbacks(r.errorCallbacks),r.handshakeCallbacks=r.buildHandshakeCallbacks(r.errorCallbacks);var o=In.getNetwork();return o.bind("online",(function(){r.timeline.info({netinfo:"online"}),"connecting"!==r.state&&"unavailable"!==r.state||r.retryIn(0)})),o.bind("offline",(function(){r.timeline.info({netinfo:"offline"}),r.connection&&r.sendActivityCheck()})),r.updateStrategy(),r}return Ee(e,t),e.prototype.connect=function(){this.connection||this.runner||(this.strategy.isSupported()?(this.updateState("connecting"),this.startConnecting(),this.setUnavailableTimer()):this.updateState("failed"))},e.prototype.send=function(t){return!!this.connection&&this.connection.send(t)},e.prototype.send_event=function(t,e,n){return!!this.connection&&this.connection.send_event(t,e,n)},e.prototype.disconnect=function(){this.disconnectInternally(),this.updateState("disconnected")},e.prototype.isUsingTLS=function(){return this.usingTLS},e.prototype.startConnecting=function(){var t=this,e=function(n,r){n?t.runner=t.strategy.connect(0,e):"error"===r.action?(t.emit("error",{type:"HandshakeError",error:r.error}),t.timeline.error({handshakeError:r.error})):(t.abortConnecting(),t.handshakeCallbacks[r.action](r))};this.runner=this.strategy.connect(0,e)},e.prototype.abortConnecting=function(){this.runner&&(this.runner.abort(),this.runner=null)},e.prototype.disconnectInternally=function(){if(this.abortConnecting(),this.clearRetryTimer(),this.clearUnavailableTimer(),this.connection){var t=this.abandonConnection();t.close()}},e.prototype.updateStrategy=function(){this.strategy=this.options.getStrategy({key:this.key,timeline:this.timeline,useTLS:this.usingTLS})},e.prototype.retryIn=function(t){var e=this;this.timeline.info({action:"retry",delay:t}),t>0&&this.emit("connecting_in",Math.round(t/1e3)),this.retryTimer=new q(t||0,(function(){e.disconnectInternally(),e.connect()}))},e.prototype.clearRetryTimer=function(){this.retryTimer&&(this.retryTimer.ensureAborted(),this.retryTimer=null)},e.prototype.setUnavailableTimer=function(){var t=this;this.unavailableTimer=new q(this.options.unavailableTimeout,(function(){t.updateState("unavailable")}))},e.prototype.clearUnavailableTimer=function(){this.unavailableTimer&&this.unavailableTimer.ensureAborted()},e.prototype.sendActivityCheck=function(){var t=this;this.stopActivityCheck(),this.connection.ping(),this.activityTimer=new q(this.options.pongTimeout,(function(){t.timeline.error({pong_timed_out:t.options.pongTimeout}),t.retryIn(0)}))},e.prototype.resetActivityCheck=function(){var t=this;this.stopActivityCheck(),this.connection&&!this.connection.handlesActivityChecks()&&(this.activityTimer=new q(this.activityTimeout,(function(){t.sendActivityCheck()})))},e.prototype.stopActivityCheck=function(){this.activityTimer&&this.activityTimer.ensureAborted()},e.prototype.buildConnectionCallbacks=function(t){var e=this;return X({},t,{message:function(t){e.resetActivityCheck(),e.emit("message",t)},ping:function(){e.send_event("pusher:pong",{})},activity:function(){e.resetActivityCheck()},error:function(t){e.emit("error",t)},closed:function(){e.abandonConnection(),e.shouldRetry()&&e.retryIn(1e3)}})},e.prototype.buildHandshakeCallbacks=function(t){var e=this;return X({},t,{connected:function(t){e.activityTimeout=Math.min(e.options.activityTimeout,t.activityTimeout,t.connection.activityTimeout||1/0),e.clearUnavailableTimer(),e.setConnection(t.connection),e.socket_id=e.connection.id,e.updateState("connected",{socket_id:e.socket_id})}})},e.prototype.buildErrorCallbacks=function(){var t=this,e=function(e){return function(n){n.error&&t.emit("error",{type:"WebSocketError",error:n.error}),e(n)}};return{tls_only:e((function(){t.usingTLS=!0,t.updateStrategy(),t.retryIn(0)})),refused:e((function(){t.disconnect()})),backoff:e((function(){t.retryIn(1e3)})),retry:e((function(){t.retryIn(0)}))}},e.prototype.setConnection=function(t){for(var e in this.connection=t,this.connectionCallbacks)this.connection.bind(e,this.connectionCallbacks[e]);this.resetActivityCheck()},e.prototype.abandonConnection=function(){if(this.connection){for(var t in this.stopActivityCheck(),this.connectionCallbacks)this.connection.unbind(t,this.connectionCallbacks[t]);var e=this.connection;return this.connection=null,e}},e.prototype.updateState=function(t,e){var n=this.state;if(this.state=t,n!==t){var r=t;"connected"===r&&(r+=" with new socket ID "+e.socket_id),lt.debug("State changed",n+" -> "+r),this.timeline.info({state:t,params:e}),this.emit("state_change",{previous:n,current:t}),this.emit(t,e)}},e.prototype.shouldRetry=function(){return"connecting"===this.state||"connected"===this.state},e}(xt),xe=Ae,Le=function(){function t(){this.channels={}}return t.prototype.add=function(t,e){return this.channels[t]||(this.channels[t]=Re(t,e)),this.channels[t]},t.prototype.all=function(){return V(this.channels)},t.prototype.find=function(t){return this.channels[t]},t.prototype.remove=function(t){var e=this.channels[t];return delete this.channels[t],e},t.prototype.disconnect=function(){Q(this.channels,(function(t){t.disconnect()}))},t}(),Ue=Le;function Re(t,e){if(0===t.indexOf("private-encrypted-")){if(e.config.nacl)return De.createEncryptedChannel(t,e,e.config.nacl);var n="Tried to subscribe to a private-encrypted- channel but no nacl implementation available",r=d.buildLogSuffix("encryptedChannelSupport");throw new w(n+". "+r)}if(0===t.indexOf("private-"))return De.createPrivateChannel(t,e);if(0===t.indexOf("presence-"))return De.createPresenceChannel(t,e);if(0===t.indexOf("#"))throw new g('Cannot create a channel with name "'+t+'".');return De.createChannel(t,e)}var je={createChannels:function(){return new Ue},createConnectionManager:function(t,e){return new xe(t,e)},createChannel:function(t,e){return new pe(t,e)},createPrivateChannel:function(t,e){return new ye(t,e)},createPresenceChannel:function(t,e){return new Se(t,e)},createEncryptedChannel:function(t,e,n){return new Oe(t,e,n)},createTimelineSender:function(t,e){return new ue(t,e)},createHandshake:function(t,e){return new ce(t,e)},createAssistantToTheTransportManager:function(t,e,n){return new te(t,e,n)}},De=je,Ie=function(){function t(t){this.options=t||{},this.livesLeft=this.options.lives||1/0}return t.prototype.getAssistant=function(t){return De.createAssistantToTheTransportManager(this,t,{minPingDelay:this.options.minPingDelay,maxPingDelay:this.options.maxPingDelay})},t.prototype.isAlive=function(){return this.livesLeft>0},t.prototype.reportDeath=function(){this.livesLeft-=1},t}(),Ne=Ie,He=function(){function t(t,e){this.strategies=t,this.loop=Boolean(e.loop),this.failFast=Boolean(e.failFast),this.timeout=e.timeout,this.timeoutLimit=e.timeoutLimit}return t.prototype.isSupported=function(){return ot(this.strategies,J.method("isSupported"))},t.prototype.connect=function(t,e){var n=this,r=this.strategies,o=0,i=this.timeout,s=null,c=function(a,u){u?e(null,u):(o+=1,n.loop&&(o%=r.length),o<r.length?(i&&(i*=2,n.timeoutLimit&&(i=Math.min(i,n.timeoutLimit))),s=n.tryStrategy(r[o],t,{timeout:i,failFast:n.failFast},c)):e(!0))};return s=this.tryStrategy(r[o],t,{timeout:i,failFast:this.failFast},c),{abort:function(){s.abort()},forceMinPriority:function(e){t=e,s&&s.forceMinPriority(e)}}},t.prototype.tryStrategy=function(t,e,n,r){var o=null,i=null;return n.timeout>0&&(o=new q(n.timeout,(function(){i.abort(),r(!0)}))),i=t.connect(e,(function(t,e){t&&o&&o.isRunning()&&!n.failFast||(o&&o.ensureAborted(),r(t,e))})),{abort:function(){o&&o.ensureAborted(),i.abort()},forceMinPriority:function(t){i.forceMinPriority(t)}}},t}(),Me=He,ze=function(){function t(t){this.strategies=t}return t.prototype.isSupported=function(){return ot(this.strategies,J.method("isSupported"))},t.prototype.connect=function(t,e){return qe(this.strategies,t,(function(t,n){return function(r,o){n[t].error=r,r?Be(n)&&e(!0):(Z(n,(function(t){t.forceMinPriority(o.transport.priority)})),e(null,o))}}))},t}(),We=ze;function qe(t,e,n){var r=K(t,(function(t,r,o,i){return t.connect(e,n(r,i))}));return{abort:function(){Z(r,Fe)},forceMinPriority:function(t){Z(r,(function(e){e.forceMinPriority(t)}))}}}function Be(t){return it(t,(function(t){return Boolean(t.error)}))}function Fe(t){t.error||t.aborted||(t.abort(),t.aborted=!0)}var Je=function(){function t(t,e,n){this.strategy=t,this.transports=e,this.ttl=n.ttl||18e5,this.usingTLS=n.useTLS,this.timeline=n.timeline}return t.prototype.isSupported=function(){return this.strategy.isSupported()},t.prototype.connect=function(t,e){var n=this.usingTLS,r=$e(n),o=[this.strategy];if(r&&r.timestamp+this.ttl>=J.now()){var i=this.transports[r.transport];i&&(this.timeline.info({cached:!0,transport:r.transport,latency:r.latency}),o.push(new Me([i],{timeout:2*r.latency+1e3,failFast:!0})))}var s=J.now(),c=o.pop().connect(t,(function r(i,a){i?(Ye(n),o.length>0?(s=J.now(),c=o.pop().connect(t,r)):e(i)):(Qe(n,a.transport.name,J.now()-s),e(null,a))}));return{abort:function(){c.abort()},forceMinPriority:function(e){t=e,c&&c.forceMinPriority(e)}}},t}(),Xe=Je;function Ge(t){return"pusherTransport"+(t?"TLS":"NonTLS")}function $e(t){var e=In.getLocalStorage();if(e)try{var n=e[Ge(t)];if(n)return JSON.parse(n)}catch(r){Ye(t)}return null}function Qe(t,e,n){var r=In.getLocalStorage();if(r)try{r[Ge(t)]=ut({timestamp:J.now(),transport:e,latency:n})}catch(o){}}function Ye(t){var e=In.getLocalStorage();if(e)try{delete e[Ge(t)]}catch(n){}}var Ve=function(){function t(t,e){var n=e.delay;this.strategy=t,this.options={delay:n}}return t.prototype.isSupported=function(){return this.strategy.isSupported()},t.prototype.connect=function(t,e){var n,r=this.strategy,o=new q(this.options.delay,(function(){n=r.connect(t,e)}));return{abort:function(){o.ensureAborted(),n&&n.abort()},forceMinPriority:function(e){t=e,n&&n.forceMinPriority(e)}}},t}(),Ze=Ve,Ke=function(){function t(t,e,n){this.test=t,this.trueBranch=e,this.falseBranch=n}return t.prototype.isSupported=function(){var t=this.test()?this.trueBranch:this.falseBranch;return t.isSupported()},t.prototype.connect=function(t,e){var n=this.test()?this.trueBranch:this.falseBranch;return n.connect(t,e)},t}(),tn=Ke,en=function(){function t(t){this.strategy=t}return t.prototype.isSupported=function(){return this.strategy.isSupported()},t.prototype.connect=function(t,e){var n=this.strategy.connect(t,(function(t,r){r&&n.abort(),e(t,r)}));return n},t}(),nn=en;function rn(t){return function(){return t.isSupported()}}var on,sn=function(t,e,n){var r={};function o(e,o,i,s,c){var a=n(t,e,o,i,s,c);return r[e]=a,a}var i,s=Object.assign({},e,{hostNonTLS:t.wsHost+":"+t.wsPort,hostTLS:t.wsHost+":"+t.wssPort,httpPath:t.wsPath}),c=Object.assign({},s,{useTLS:!0}),a=Object.assign({},e,{hostNonTLS:t.httpHost+":"+t.httpPort,hostTLS:t.httpHost+":"+t.httpsPort,httpPath:t.httpPath}),u={loop:!0,timeout:15e3,timeoutLimit:6e4},h=new Ne({lives:2,minPingDelay:1e4,maxPingDelay:t.activityTimeout}),l=new Ne({lives:2,minPingDelay:1e4,maxPingDelay:t.activityTimeout}),p=o("ws","ws",3,s,h),f=o("wss","ws",3,c,h),d=o("sockjs","sockjs",1,a),y=o("xhr_streaming","xhr_streaming",1,a,l),v=o("xdr_streaming","xdr_streaming",1,a,l),g=o("xhr_polling","xhr_polling",1,a),b=o("xdr_polling","xdr_polling",1,a),m=new Me([p],u),_=new Me([f],u),w=new Me([d],u),S=new Me([new tn(rn(y),y,v)],u),k=new Me([new tn(rn(g),g,b)],u),C=new Me([new tn(rn(S),new We([S,new Ze(k,{delay:4e3})]),k)],u),P=new tn(rn(C),C,w);return i=e.useTLS?new We([m,new Ze(P,{delay:2e3})]):new We([m,new Ze(_,{delay:2e3}),new Ze(P,{delay:5e3})]),new Xe(new nn(new tn(rn(p),i,P)),r,{ttl:18e5,timeline:e.timeline,useTLS:e.useTLS})},cn=sn,an=function(){var t=this;t.timeline.info(t.buildTimelineMessage({transport:t.name+(t.options.useTLS?"s":"")})),t.hooks.isInitialized()?t.changeState("initialized"):t.hooks.file?(t.changeState("initializing"),l.load(t.hooks.file,{useTLS:t.options.useTLS},(function(e,n){t.hooks.isInitialized()?(t.changeState("initialized"),n(!0)):(e&&t.onError(e),t.onClose(),n(!1))}))):t.onClose()},un={getRequest:function(t){var e=new window.XDomainRequest;return e.ontimeout=function(){t.emit("error",new b),t.close()},e.onerror=function(e){t.emit("error",e),t.close()},e.onprogress=function(){e.responseText&&e.responseText.length>0&&t.onChunk(200,e.responseText)},e.onload=function(){e.responseText&&e.responseText.length>0&&t.onChunk(200,e.responseText),t.emit("finished",200),t.close()},e},abortRequest:function(t){t.ontimeout=t.onerror=t.onprogress=t.onload=null,t.abort()}},hn=un,ln=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),pn=262144,fn=function(t){function e(e,n,r){var o=t.call(this)||this;return o.hooks=e,o.method=n,o.url=r,o}return ln(e,t),e.prototype.start=function(t){var e=this;this.position=0,this.xhr=this.hooks.getRequest(this),this.unloader=function(){e.close()},In.addUnloadListener(this.unloader),this.xhr.open(this.method,this.url,!0),this.xhr.setRequestHeader&&this.xhr.setRequestHeader("Content-Type","application/json"),this.xhr.send(t)},e.prototype.close=function(){this.unloader&&(In.removeUnloadListener(this.unloader),this.unloader=null),this.xhr&&(this.hooks.abortRequest(this.xhr),this.xhr=null)},e.prototype.onChunk=function(t,e){while(1){var n=this.advanceBuffer(e);if(!n)break;this.emit("chunk",{status:t,data:n})}this.isBufferTooLong(e)&&this.emit("buffer_too_long")},e.prototype.advanceBuffer=function(t){var e=t.slice(this.position),n=e.indexOf("\n");return-1!==n?(this.position+=n+1,e.slice(0,n)):null},e.prototype.isBufferTooLong=function(t){return this.position===t.length&&t.length>pn},e}(xt),dn=fn;(function(t){t[t["CONNECTING"]=0]="CONNECTING",t[t["OPEN"]=1]="OPEN",t[t["CLOSED"]=3]="CLOSED"})(on||(on={}));var yn=on,vn=1,gn=function(){function t(t,e){this.hooks=t,this.session=Sn(1e3)+"/"+kn(8),this.location=bn(e),this.readyState=yn.CONNECTING,this.openStream()}return t.prototype.send=function(t){return this.sendRaw(JSON.stringify([t]))},t.prototype.ping=function(){this.hooks.sendHeartbeat(this)},t.prototype.close=function(t,e){this.onClose(t,e,!0)},t.prototype.sendRaw=function(t){if(this.readyState!==yn.OPEN)return!1;try{return In.createSocketRequest("POST",_n(mn(this.location,this.session))).start(t),!0}catch(e){return!1}},t.prototype.reconnect=function(){this.closeStream(),this.openStream()},t.prototype.onClose=function(t,e,n){this.closeStream(),this.readyState=yn.CLOSED,this.onclose&&this.onclose({code:t,reason:e,wasClean:n})},t.prototype.onChunk=function(t){if(200===t.status){var e;this.readyState===yn.OPEN&&this.onActivity();var n=t.data.slice(0,1);switch(n){case"o":e=JSON.parse(t.data.slice(1)||"{}"),this.onOpen(e);break;case"a":e=JSON.parse(t.data.slice(1)||"[]");for(var r=0;r<e.length;r++)this.onEvent(e[r]);break;case"m":e=JSON.parse(t.data.slice(1)||"null"),this.onEvent(e);break;case"h":this.hooks.onHeartbeat(this);break;case"c":e=JSON.parse(t.data.slice(1)||"[]"),this.onClose(e[0],e[1],!0);break}}},t.prototype.onOpen=function(t){this.readyState===yn.CONNECTING?(t&&t.hostname&&(this.location.base=wn(this.location.base,t.hostname)),this.readyState=yn.OPEN,this.onopen&&this.onopen()):this.onClose(1006,"Server lost session",!0)},t.prototype.onEvent=function(t){this.readyState===yn.OPEN&&this.onmessage&&this.onmessage({data:t})},t.prototype.onActivity=function(){this.onactivity&&this.onactivity()},t.prototype.onError=function(t){this.onerror&&this.onerror(t)},t.prototype.openStream=function(){var t=this;this.stream=In.createSocketRequest("POST",_n(this.hooks.getReceiveURL(this.location,this.session))),this.stream.bind("chunk",(function(e){t.onChunk(e)})),this.stream.bind("finished",(function(e){t.hooks.onFinished(t,e)})),this.stream.bind("buffer_too_long",(function(){t.reconnect()}));try{this.stream.start()}catch(e){J.defer((function(){t.onError(e),t.onClose(1006,"Could not start streaming",!1)}))}},t.prototype.closeStream=function(){this.stream&&(this.stream.unbind_all(),this.stream.close(),this.stream=null)},t}();function bn(t){var e=/([^\?]*)\/*(\??.*)/.exec(t);return{base:e[1],queryString:e[2]}}function mn(t,e){return t.base+"/"+e+"/xhr_send"}function _n(t){var e=-1===t.indexOf("?")?"?":"&";return t+e+"t="+ +new Date+"&n="+vn++}function wn(t,e){var n=/(https?:\/\/)([^\/:]+)((\/|:)?.*)/.exec(t);return n[1]+e+n[3]}function Sn(t){return In.randomInt(t)}function kn(t){for(var e=[],n=0;n<t;n++)e.push(Sn(32).toString(32));return e.join("")}var Cn=gn,Pn={getReceiveURL:function(t,e){return t.base+"/"+e+"/xhr_streaming"+t.queryString},onHeartbeat:function(t){t.sendRaw("[]")},sendHeartbeat:function(t){t.sendRaw("[]")},onFinished:function(t,e){t.onClose(1006,"Connection interrupted ("+e+")",!1)}},Tn=Pn,On={getReceiveURL:function(t,e){return t.base+"/"+e+"/xhr"+t.queryString},onHeartbeat:function(){},sendHeartbeat:function(t){t.sendRaw("[]")},onFinished:function(t,e){200===e?t.reconnect():t.onClose(1006,"Connection interrupted ("+e+")",!1)}},En=On,An={getRequest:function(t){var e=In.getXHRAPI(),n=new e;return n.onreadystatechange=n.onprogress=function(){switch(n.readyState){case 3:n.responseText&&n.responseText.length>0&&t.onChunk(n.status,n.responseText);break;case 4:n.responseText&&n.responseText.length>0&&t.onChunk(n.status,n.responseText),t.emit("finished",n.status),t.close();break}},n},abortRequest:function(t){t.onreadystatechange=null,t.abort()}},xn=An,Ln={createStreamingSocket:function(t){return this.createSocket(Tn,t)},createPollingSocket:function(t){return this.createSocket(En,t)},createSocket:function(t,e){return new Cn(t,e)},createXHR:function(t,e){return this.createRequest(xn,t,e)},createRequest:function(t,e,n){return new dn(t,e,n)}},Un=Ln;Un.createXDR=function(t,e){return this.createRequest(hn,t,e)};var Rn,jn=Un,Dn={nextAuthCallbackID:1,auth_callbacks:{},ScriptReceivers:i,DependenciesReceivers:h,getDefaultStrategy:cn,Transports:Qt,transportConnectionInitializer:an,HTTPFactory:jn,TimelineTransport:_t,getXHRAPI:function(){return window.XMLHttpRequest},getWebSocketAPI:function(){return window.WebSocket||window.MozWebSocket},setup:function(t){var e=this;window.Pusher=t;var n=function(){e.onDocumentBody(t.ready)};window.JSON?n():l.load("json2",{},n)},getDocument:function(){return document},getProtocol:function(){return this.getDocument().location.protocol},getAuthorizers:function(){return{ajax:T,jsonp:ft}},onDocumentBody:function(t){var e=this;document.body?t():setTimeout((function(){e.onDocumentBody(t)}),0)},createJSONPRequest:function(t,e){return new gt(t,e)},createScriptRequest:function(t){return new yt(t)},getLocalStorage:function(){try{return window.localStorage}catch(t){return}},createXHR:function(){return this.getXHRAPI()?this.createXMLHttpRequest():this.createMicrosoftXHR()},createXMLHttpRequest:function(){var t=this.getXHRAPI();return new t},createMicrosoftXHR:function(){return new ActiveXObject("Microsoft.XMLHTTP")},getNetwork:function(){return Zt},createWebSocket:function(t){var e=this.getWebSocketAPI();return new e(t)},createSocketRequest:function(t,e){if(this.isXHRSupported())return this.HTTPFactory.createXHR(t,e);if(this.isXDRSupported(0===e.indexOf("https:")))return this.HTTPFactory.createXDR(t,e);throw"Cross-origin HTTP requests are not supported"},isXHRSupported:function(){var t=this.getXHRAPI();return Boolean(t)&&void 0!==(new t).withCredentials},isXDRSupported:function(t){var e=t?"https:":"http:",n=this.getProtocol();return Boolean(window["XDomainRequest"])&&n===e},addUnloadListener:function(t){void 0!==window.addEventListener?window.addEventListener("unload",t,!1):void 0!==window.attachEvent&&window.attachEvent("onunload",t)},removeUnloadListener:function(t){void 0!==window.addEventListener?window.removeEventListener("unload",t,!1):void 0!==window.detachEvent&&window.detachEvent("onunload",t)},randomInt:function(t){var e=function(){var t=window.crypto||window["msCrypto"],e=t.getRandomValues(new Uint32Array(1))[0];return e/Math.pow(2,32)};return Math.floor(e()*t)}},In=Dn;(function(t){t[t["ERROR"]=3]="ERROR",t[t["INFO"]=6]="INFO",t[t["DEBUG"]=7]="DEBUG"})(Rn||(Rn={}));var Nn=Rn,Hn=function(){function t(t,e,n){this.key=t,this.session=e,this.events=[],this.options=n||{},this.sent=0,this.uniqueID=0}return t.prototype.log=function(t,e){t<=this.options.level&&(this.events.push(X({},e,{timestamp:J.now()})),this.options.limit&&this.events.length>this.options.limit&&this.events.shift())},t.prototype.error=function(t){this.log(Nn.ERROR,t)},t.prototype.info=function(t){this.log(Nn.INFO,t)},t.prototype.debug=function(t){this.log(Nn.DEBUG,t)},t.prototype.isEmpty=function(){return 0===this.events.length},t.prototype.send=function(t,e){var n=this,r=X({session:this.session,bundle:this.sent+1,key:this.key,lib:"js",version:this.options.version,cluster:this.options.cluster,features:this.options.features,timeline:this.events},this.options.params);return this.events=[],t(r,(function(t,r){t||n.sent++,e&&e(t,r)})),!0},t.prototype.generateUniqueID=function(){return this.uniqueID++,this.uniqueID},t}(),Mn=Hn,zn=function(){function t(t,e,n,r){this.name=t,this.priority=e,this.transport=n,this.options=r||{}}return t.prototype.isSupported=function(){return this.transport.isSupported({useTLS:this.options.useTLS})},t.prototype.connect=function(t,e){var n=this;if(!this.isSupported())return qn(new k,e);if(this.priority<t)return qn(new m,e);var r=!1,o=this.transport.createConnection(this.name,this.priority,this.options.key,this.options),i=null,s=function(){o.unbind("initialized",s),o.connect()},c=function(){i=De.createHandshake(o,(function(t){r=!0,h(),e(null,t)}))},a=function(t){h(),e(t)},u=function(){var t;h(),t=ut(o),e(new _(t))},h=function(){o.unbind("initialized",s),o.unbind("open",c),o.unbind("error",a),o.unbind("closed",u)};return o.bind("initialized",s),o.bind("open",c),o.bind("error",a),o.bind("closed",u),o.initialize(),{abort:function(){r||(h(),i?i.close():o.close())},forceMinPriority:function(t){r||n.priority<t&&(i?i.close():o.close())}}},t}(),Wn=zn;function qn(t,e){return J.defer((function(){e(t)})),{abort:function(){},forceMinPriority:function(){}}}var Bn=In.Transports,Fn=function(t,e,n,r,o,i){var s=Bn[n];if(!s)throw new S(n);var c,a=(!t.enabledTransports||-1!==$(t.enabledTransports,e))&&(!t.disabledTransports||-1===$(t.disabledTransports,e));return a?(o=Object.assign({ignoreNullOrigin:t.ignoreNullOrigin},o),c=new Wn(e,r,i?i.getAssistant(s):s,o)):c=Jn,c},Jn={isSupported:function(){return!1},connect:function(t,e){var n=J.defer((function(){e(new k)}));return{abort:function(){n.ensureAborted()},forceMinPriority:function(){}}}};function Xn(t){if(null==t)throw"You must pass an options object";if(null==t.cluster)throw"Options object must provide a cluster";"disableStats"in t&&lt.warn("The disableStats option is deprecated in favor of enableStats")}var Gn=function(t,e){var n="socket_id="+encodeURIComponent(t.socketId);for(var r in e.params)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(e.params[r]);if(null!=e.paramsProvider){var o=e.paramsProvider();for(var r in o)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(o[r])}return n},$n=function(t){if("undefined"===typeof In.getAuthorizers()[t.transport])throw"'"+t.transport+"' is not a recognized auth transport";return function(e,n){var o=Gn(e,t);In.getAuthorizers()[t.transport](In,o,t,r.UserAuthentication,n)}},Qn=$n,Yn=function(t,e){var n="socket_id="+encodeURIComponent(t.socketId);for(var r in n+="&channel_name="+encodeURIComponent(t.channelName),e.params)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(e.params[r]);if(null!=e.paramsProvider){var o=e.paramsProvider();for(var r in o)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(o[r])}return n},Vn=function(t){if("undefined"===typeof In.getAuthorizers()[t.transport])throw"'"+t.transport+"' is not a recognized auth transport";return function(e,n){var o=Yn(e,t);In.getAuthorizers()[t.transport](In,o,t,r.ChannelAuthorization,n)}},Zn=Vn,Kn=function(t,e,n){var r={authTransport:e.transport,authEndpoint:e.endpoint,auth:{params:e.params,headers:e.headers}};return function(e,o){var i=t.channel(e.channelName),s=n(i,r);s.authorize(e.socketId,o)}},tr=function(){return tr=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n],e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},tr.apply(this,arguments)};function er(t,e){var n={activityTimeout:t.activityTimeout||c.activityTimeout,cluster:t.cluster,httpPath:t.httpPath||c.httpPath,httpPort:t.httpPort||c.httpPort,httpsPort:t.httpsPort||c.httpsPort,pongTimeout:t.pongTimeout||c.pongTimeout,statsHost:t.statsHost||c.stats_host,unavailableTimeout:t.unavailableTimeout||c.unavailableTimeout,wsPath:t.wsPath||c.wsPath,wsPort:t.wsPort||c.wsPort,wssPort:t.wssPort||c.wssPort,enableStats:sr(t),httpHost:nr(t),useTLS:ir(t),wsHost:rr(t),userAuthenticator:cr(t),channelAuthorizer:ur(t,e)};return"disabledTransports"in t&&(n.disabledTransports=t.disabledTransports),"enabledTransports"in t&&(n.enabledTransports=t.enabledTransports),"ignoreNullOrigin"in t&&(n.ignoreNullOrigin=t.ignoreNullOrigin),"timelineParams"in t&&(n.timelineParams=t.timelineParams),"nacl"in t&&(n.nacl=t.nacl),n}function nr(t){return t.httpHost?t.httpHost:t.cluster?"sockjs-"+t.cluster+".pusher.com":c.httpHost}function rr(t){return t.wsHost?t.wsHost:or(t.cluster)}function or(t){return"ws-"+t+".pusher.com"}function ir(t){return"https:"===In.getProtocol()||!1!==t.forceTLS}function sr(t){return"enableStats"in t?t.enableStats:"disableStats"in t&&!t.disableStats}function cr(t){var e=tr(tr({},c.userAuthentication),t.userAuthentication);return"customHandler"in e&&null!=e["customHandler"]?e["customHandler"]:Qn(e)}function ar(t,e){var n;return"channelAuthorization"in t?n=tr(tr({},c.channelAuthorization),t.channelAuthorization):(n={transport:t.authTransport||c.authTransport,endpoint:t.authEndpoint||c.authEndpoint},"auth"in t&&("params"in t.auth&&(n.params=t.auth.params),"headers"in t.auth&&(n.headers=t.auth.headers)),"authorizer"in t&&(n.customHandler=Kn(e,n,t.authorizer))),n}function ur(t,e){var n=ar(t,e);return"customHandler"in n&&null!=n["customHandler"]?n["customHandler"]:Zn(n)}var hr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),lr=function(t){function e(e){var n=t.call(this,(function(t,e){lt.debug("No callbacks on watchlist events for "+t)}))||this;return n.pusher=e,n.bindWatchlistInternalEvent(),n}return hr(e,t),e.prototype.handleEvent=function(t){var e=this;t.data.events.forEach((function(t){e.emit(t.name,t)}))},e.prototype.bindWatchlistInternalEvent=function(){var t=this;this.pusher.connection.bind("message",(function(e){var n=e.event;"pusher_internal:watchlist_events"===n&&t.handleEvent(e)}))},e}(xt),pr=lr;function fr(){var t,e,n=new Promise((function(n,r){t=n,e=r}));return{promise:n,resolve:t,reject:e}}var dr=fr,yr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),vr=function(t){function e(e){var n=t.call(this,(function(t,e){lt.debug("No callbacks on user for "+t)}))||this;return n.signin_requested=!1,n.user_data=null,n.serverToUserChannel=null,n.signinDonePromise=null,n._signinDoneResolve=null,n._onAuthorize=function(t,e){if(t)return lt.warn("Error during signin: "+t),void n._cleanup();n.pusher.send_event("pusher:signin",{auth:e.auth,user_data:e.user_data})},n.pusher=e,n.pusher.connection.bind("state_change",(function(t){var e=t.previous,r=t.current;"connected"!==e&&"connected"===r&&n._signin(),"connected"===e&&"connected"!==r&&(n._cleanup(),n._newSigninPromiseIfNeeded())})),n.watchlist=new pr(e),n.pusher.connection.bind("message",(function(t){var e=t.event;"pusher:signin_success"===e&&n._onSigninSuccess(t.data),n.serverToUserChannel&&n.serverToUserChannel.name===t.channel&&n.serverToUserChannel.handleEvent(t)})),n}return yr(e,t),e.prototype.signin=function(){this.signin_requested||(this.signin_requested=!0,this._signin())},e.prototype._signin=function(){this.signin_requested&&(this._newSigninPromiseIfNeeded(),"connected"===this.pusher.connection.state&&this.pusher.config.userAuthenticator({socketId:this.pusher.connection.socket_id},this._onAuthorize))},e.prototype._onSigninSuccess=function(t){try{this.user_data=JSON.parse(t.user_data)}catch(e){return lt.error("Failed parsing user data after signin: "+t.user_data),void this._cleanup()}if("string"!==typeof this.user_data.id||""===this.user_data.id)return lt.error("user_data doesn't contain an id. user_data: "+this.user_data),void this._cleanup();this._signinDoneResolve(),this._subscribeChannels()},e.prototype._subscribeChannels=function(){var t=this,e=function(e){e.subscriptionPending&&e.subscriptionCancelled?e.reinstateSubscription():e.subscriptionPending||"connected"!==t.pusher.connection.state||e.subscribe()};this.serverToUserChannel=new pe("#server-to-user-"+this.user_data.id,this.pusher),this.serverToUserChannel.bind_global((function(e,n){0!==e.indexOf("pusher_internal:")&&0!==e.indexOf("pusher:")&&t.emit(e,n)})),e(this.serverToUserChannel)},e.prototype._cleanup=function(){this.user_data=null,this.serverToUserChannel&&(this.serverToUserChannel.unbind_all(),this.serverToUserChannel.disconnect(),this.serverToUserChannel=null),this.signin_requested&&this._signinDoneResolve()},e.prototype._newSigninPromiseIfNeeded=function(){if(this.signin_requested&&(!this.signinDonePromise||this.signinDonePromise.done)){var t=dr(),e=t.promise,n=t.resolve;t.reject;e.done=!1;var r=function(){e.done=!0};e.then(r)["catch"](r),this.signinDonePromise=e,this._signinDoneResolve=n}},e}(xt),gr=vr,br=function(){function t(e,n){var r=this;_r(e),Xn(n),this.key=e,this.config=er(n,this),this.channels=De.createChannels(),this.global_emitter=new xt,this.sessionID=In.randomInt(1e9),this.timeline=new Mn(this.key,this.sessionID,{cluster:this.config.cluster,features:t.getClientFeatures(),params:this.config.timelineParams||{},limit:50,level:Nn.INFO,version:c.VERSION}),this.config.enableStats&&(this.timelineSender=De.createTimelineSender(this.timeline,{host:this.config.statsHost,path:"/timeline/v2/"+In.TimelineTransport.name}));var o=function(t){return In.getDefaultStrategy(r.config,t,Fn)};this.connection=De.createConnectionManager(this.key,{getStrategy:o,timeline:this.timeline,activityTimeout:this.config.activityTimeout,pongTimeout:this.config.pongTimeout,unavailableTimeout:this.config.unavailableTimeout,useTLS:Boolean(this.config.useTLS)}),this.connection.bind("connected",(function(){r.subscribeAll(),r.timelineSender&&r.timelineSender.send(r.connection.isUsingTLS())})),this.connection.bind("message",(function(t){var e=t.event,n=0===e.indexOf("pusher_internal:");if(t.channel){var o=r.channel(t.channel);o&&o.handleEvent(t)}n||r.global_emitter.emit(t.event,t.data)})),this.connection.bind("connecting",(function(){r.channels.disconnect()})),this.connection.bind("disconnected",(function(){r.channels.disconnect()})),this.connection.bind("error",(function(t){lt.warn(t)})),t.instances.push(this),this.timeline.info({instances:t.instances.length}),this.user=new gr(this),t.isReady&&this.connect()}return t.ready=function(){t.isReady=!0;for(var e=0,n=t.instances.length;e<n;e++)t.instances[e].connect()},t.getClientFeatures=function(){return Y(nt({ws:In.Transports.ws},(function(t){return t.isSupported({})})))},t.prototype.channel=function(t){return this.channels.find(t)},t.prototype.allChannels=function(){return this.channels.all()},t.prototype.connect=function(){if(this.connection.connect(),this.timelineSender&&!this.timelineSenderTimer){var t=this.connection.isUsingTLS(),e=this.timelineSender;this.timelineSenderTimer=new B(6e4,(function(){e.send(t)}))}},t.prototype.disconnect=function(){this.connection.disconnect(),this.timelineSenderTimer&&(this.timelineSenderTimer.ensureAborted(),this.timelineSenderTimer=null)},t.prototype.bind=function(t,e,n){return this.global_emitter.bind(t,e,n),this},t.prototype.unbind=function(t,e,n){return this.global_emitter.unbind(t,e,n),this},t.prototype.bind_global=function(t){return this.global_emitter.bind_global(t),this},t.prototype.unbind_global=function(t){return this.global_emitter.unbind_global(t),this},t.prototype.unbind_all=function(t){return this.global_emitter.unbind_all(),this},t.prototype.subscribeAll=function(){var t;for(t in this.channels.channels)this.channels.channels.hasOwnProperty(t)&&this.subscribe(t)},t.prototype.subscribe=function(t){var e=this.channels.add(t,this);return e.subscriptionPending&&e.subscriptionCancelled?e.reinstateSubscription():e.subscriptionPending||"connected"!==this.connection.state||e.subscribe(),e},t.prototype.unsubscribe=function(t){var e=this.channels.find(t);e&&e.subscriptionPending?e.cancelSubscription():(e=this.channels.remove(t),e&&e.subscribed&&e.unsubscribe())},t.prototype.send_event=function(t,e,n){return this.connection.send_event(t,e,n)},t.prototype.shouldUseTLS=function(){return this.config.useTLS},t.prototype.signin=function(){this.user.signin()},t.instances=[],t.isReady=!1,t.logToConsole=!1,t.Runtime=In,t.ScriptReceivers=In.ScriptReceivers,t.DependenciesReceivers=In.DependenciesReceivers,t.auth_callbacks=In.auth_callbacks,t}(),mr=e["default"]=br;function _r(t){if(null===t||void 0===t)throw"You must pass your app key when you instantiate Pusher."}In.setup(br)}])}))},3744:(t,e)=>{"use strict";e.Z=(t,e)=>{const n=t.__vccOpts||t;for(const[r,o]of e)n[r]=o;return n}},6848:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>b});var r=n(6252),o=n(2262),i=n(7476),s=n(3577);const c=(0,r.aZ)({__name:"DriverJobModal",props:{isOpen:Boolean,tripDetails:{type:Object,required:!0}},emits:["update:isOpen","accept","decline","update:tripDetails"],setup(t,{emit:e}){function n(){e("update:isOpen",!1)}function c(){e("accept")}function a(){e("decline")}return(e,u)=>((0,r.wg)(),(0,r.j4)((0,o.SU)(i.ki),{"is-open":t.isOpen,onDismiss:n},{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Gu),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.sr),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.wd),null,{default:(0,r.w5)((()=>[(0,r.Uk)("Job Found")])),_:1})])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.W2),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.q_),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Ie),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Q$),null,{default:(0,r.w5)((()=>[(0,r.Uk)("Pick-Up:")])),_:1}),(0,r.Wm)((0,o.SU)(i.uN),{slot:"end"},{default:(0,r.w5)((()=>[(0,r.Uk)((0,s.zw)(t.tripDetails.pickUp.name),1)])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.Ie),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Q$),null,{default:(0,r.w5)((()=>[(0,r.Uk)("Drop-Off:")])),_:1}),(0,r.Wm)((0,o.SU)(i.uN),{slot:"end"},{default:(0,r.w5)((()=>[(0,r.Uk)((0,s.zw)(t.tripDetails.dropOff.name),1)])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.Ie),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Q$),null,{default:(0,r.w5)((()=>[(0,r.Uk)("Distance:")])),_:1}),(0,r.Wm)((0,o.SU)(i.uN),{slot:"end"},{default:(0,r.w5)((()=>[(0,r.Uk)((0,s.zw)(t.tripDetails.distance)+" km",1)])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.Ie),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Q$),null,{default:(0,r.w5)((()=>[(0,r.Uk)("Fare:")])),_:1}),(0,r.Wm)((0,o.SU)(i.uN),{slot:"end"},{default:(0,r.w5)((()=>[(0,r.Uk)("RM "+(0,s.zw)(t.tripDetails.fare),1)])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.Ie),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Q$),null,{default:(0,r.w5)((()=>[(0,r.Uk)("Estimated Duration:")])),_:1}),(0,r.Wm)((0,o.SU)(i.uN),{slot:"end"},{default:(0,r.w5)((()=>[(0,r.Uk)((0,s.zw)(t.tripDetails.duration)+" mins",1)])),_:1})])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.jY),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Nd),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.wI),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.YG),{color:"primary",expand:"block",onClick:u[0]||(u[0]=t=>c())},{default:(0,r.w5)((()=>[(0,r.Uk)("Accept")])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.wI),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.YG),{color:"secondary",expand:"block",onClick:u[1]||(u[1]=t=>a())},{default:(0,r.w5)((()=>[(0,r.Uk)("Decline")])),_:1})])),_:1})])),_:1})])),_:1})])),_:1})])),_:1},8,["is-open"]))}}),a=c,u=a;var h=n(3751),l=n(6606),p=n.n(l);const f=t=>((0,r.dD)("data-v-350e11b8"),t=t(),(0,r.Cn)(),t),d=f((()=>(0,r._)("h1",null,"Status",-1))),y=(0,r.aZ)({__name:"DriverPage",setup(t){const e=(0,h.h)(),n=(0,o.iH)({}),s=((0,o.iH)(!1),(0,o.iH)(!1));function c(){e.logout()}function a(){s.value=!1}function l(){s.value=!1}const f=new(p())("a294542618ad0c79d7b7",{cluster:"ap1"}),y=f.subscribe("main-channel");return y.bind("main-event",(function(t){console.log(t);t.data;s.value=!0})),(t,e)=>((0,r.wg)(),(0,r.j4)((0,o.SU)(i._i),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Gu),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.sr),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.wd),null,{default:(0,r.w5)((()=>[(0,r.Uk)("Driver Page")])),_:1})])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.W2),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.PM),{class:"ion-text-center"},{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Zi),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.Dq),null,{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.yW),null,{default:(0,r.w5)((()=>[d])),_:1})])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.FN),{class:"toggle-container"},{default:(0,r.w5)((()=>[(0,r.Wm)((0,o.SU)(i.ho),{mode:"ios"})])),_:1})])),_:1}),(0,r.Wm)((0,o.SU)(i.YG),{onClick:c,expand:"block"},{default:(0,r.w5)((()=>[(0,r.Uk)(" Logout ")])),_:1}),(0,r.Wm)(u,{isOpen:s.value,"onUpdate:isOpen":e[0]||(e[0]=t=>s.value=t),tripDetails:n.value,onAccept:a,onDecline:l},null,8,["isOpen","tripDetails"])])),_:1})])),_:1}))}});var v=n(3744);const g=(0,v.Z)(y,[["__scopeId","data-v-350e11b8"]]),b=g}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,